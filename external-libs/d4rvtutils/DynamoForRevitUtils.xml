<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoForRevitUtils</name>
    </assembly>
    <members>
        <member name="T:DynamoForRevitUtils.Constants.Common">
            <summary>
            Common Constants
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Constants.Common.PACKAGE_NAME">
            <summary>
            Package Name
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Constants.Common.ERROR_TITLE">
            <summary>
            Default error title used on Task Dialogs
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractBoundingBox">
            <summary>
            Abstract class for Abstract Bounding Box
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractBoundingBox.#ctor(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Constructor for Abstract Bounding Box
            </summary>
            <param name="bbox"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractBoundingBox.Visualize(Autodesk.DesignScript.Geometry.Point,System.Double,DSCore.Color,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractCoordinateSystem">
            <summary>
            Abstract class for Abstract Coordinate System
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractCoordinateSystem.#ctor(Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Constructor for Abstract Coordinate System
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractCoordinateSystem.Visualize(Autodesk.DesignScript.Geometry.Point,System.Double,DSCore.Color,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractGeometryBase`1">
            <summary>
            Abstract class for Abstract Geometry
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractGeometryBase`1.abstractObject">
            <summary>
            Abstract object
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractGeometryBase`1.Visualize(Autodesk.DesignScript.Geometry.Point,System.Double,DSCore.Color,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractGeometryFactory">
            <summary>
            Factory class for Abstract Geometry
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractGeometryFactory.GetAbstractGeometryObject(Autodesk.DesignScript.Geometry.DesignScriptEntity)">
            <summary>
            Get Abstract Geometry object from DesignScriptEntity
            </summary>
            <param name="designScriptEntity"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractVector">
            <summary>
            Abstract class for Abstract Vector
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractVector.#ctor(Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Using the base class constructor
            </summary>
            <param name="vector"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.AbstractVector.Visualize(Autodesk.DesignScript.Geometry.Point,System.Double,DSCore.Color,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.AbstractGeometry.IAbstractGeometry">
            <summary>
            Interface for abstract geometry
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.AbstractGeometry.IAbstractGeometry.Visualize(Autodesk.DesignScript.Geometry.Point,System.Double,DSCore.Color,System.Boolean,System.Boolean)">
            <summary>
            Method to visualize abstract geometry in Dynamo
            </summary>
            <param name="origin">Point that represents the abstract geometry</param>
            <param name="size">Size of abstract geometry</param>
            <param name="color">Color of abstract geometry</param>
            <param name="showNormal">Show plane normal as vector visualization</param>
            <param name="wireFrame">Choose whether show bounding box as wire frame</param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Axis">
            <summary>
            Represents an axis in the DynamoForRevitUtils library.
            </summary>
            <remarks>
            Axis are used to create Section Views in Revit.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Elevation">
            
            <summary>
            Axis elevation (Z value)
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Name">
            <summary>
            Axis name
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.StartPoint">
            <summary>
            Axis start point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.EndPoint">
            <summary>
            Axis end point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Direction">
            <summary>
            Axis direction
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Line">
            <summary>
            Dynamo representation of the Axis
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Length">
            <summary>
            Axis length in Revit Document Display Units
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.CoordinateSystem">
            <summary>
            Dynamo representation of the Axis coordinate system
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.Normal">
            <summary>
            Dynamo representation of the Axis Normal
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.IsPerpendicular">
            <summary>
            Indicates if the Axis is perpendicular
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Axis.IsTranslated">
            <summary>
            Indicates if the Axis is translated
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Axis.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs an Axis object by it's extremities coordinates
            </summary>
            <param name="name">Axis name</param>
            <param name="x1">Start point X coordinate in Revit Document Display Units</param>
            <param name="y1">Start point Y coordinate in Revit Document Display Units</param>
            <param name="x2">End point X coordinate in Revit Document Display Units</param>
            <param name="y2">End point Y coordinate in Revit Document Display Units</param>
            <param name="elevation">Axis elevation in Revit Document Display Units</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Axis.#ctor(System.String,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Constructs an Axis object by Start Point, End Point
            </summary>
            <param name="name">Axis name</param>
            <param name="startPoint">Axis start point</param>
            <param name="endPoint">Axis end point</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Axis.#ctor(System.String,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Constructs an Axis object by it's Dynamo Line representation
            </summary>
            <param name="name">Axis name</param>
            <param name="line">Axis Dynamo Line</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Axis.Perpendicular(System.Double,System.Nullable{System.Double},System.Boolean,System.Double,System.Double)">
            <summary>
            Perpendicular Axis from original axis
            </summary>
            <param name="parameter">A value between 0 and 1, representing the position of the Perpendicular Axis along the original axis</param>
            <param name="length">The length of the Perpendicular Axis</param>
            <param name="reverse">Reverse the Perpendicular Axis</param>
            <param name="xOffset">Perpendicular Axis offset on original axis normal direction</param>
            <param name="yOffset">Perpendicular Axis offset on original axis direction</param>
            <returns>Perpendicular Axis</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Axis.Translate(Autodesk.DesignScript.Geometry.Vector,System.Double)">
            <summary>
            Translates the Axis
            </summary>
            <param name="direction">Dynamo Vector representing the translation direction</param>
            <param name="distance">Translation distance</param>
            <returns>Translated Axis</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo">
            <summary>
            Class for storing information about <see cref="T:Autodesk.Revit.DB.WallType"/> layers
            </summary>
            <remarks>
            <para>Reference: https://apidocs.co/apps/revit/2020/dc1a081e-8dab-565f-145d-a429098d353c.htm</para>
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.Structure">
            <summary>
            WallType compound structure
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.FirstCoreLayerIndex">
            <summary>
            Compound structure first core layer index
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.LastCoreLayerIndex">
            <summary>
            Compound structure last core layer index
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.Layers">
            <summary>
            Wall Layers
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorLayersAmount">
            <summary>
            Exterior layers quantity
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreLayersAmount">
            <summary>
            Core layers quantity
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorLayersAmount">
            <summary>
            Interior layers quantity
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorLayers">
            <summary>
            Exterior layers
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreLayers">
            <summary>
            Core layers
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorLayers">
            <summary>
            Interior layers
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorMaterials">
            <summary>
            Exterior layers materials
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreMaterials">
            <summary>
            Core layers materials
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorMaterials">
            <summary>
            Interior layers materials
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorMaterialsNames">
            <summary>
            Exterior layers materials names
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreMaterialsNames">
            <summary>
            Core layers materials names
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorMaterialsNames">
            <summary>
            Interior layers materials names
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorLayersWidth">
            <summary>
            Sum of exterior layers width
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreLayersWidth">
            <summary>
            Sum of core layers width
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorLayersWidth">
            <summary>
            Sum of interior layers width
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.TotalWidth">
            <summary>
            Total layers width
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ExteriorLayersFunctions">
            <summary>
            Exterior layers functions
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.CoreLayersFunctions">
            <summary>
            Core layers functions
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.InteriorLayersFunctions">
            <summary>
            Interior layers functions
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.HostObjAttributes)">
            <summary>
            Construct CompoundStructureLayersInfo from HostObjAttributes
            </summary>
            <param name="hostObjAttrib"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.Architecture.BuildingPad)">
            <summary>
            Construct CompoundStructureLayersInfo from BuildingPad
            </summary>
            <param name="buildingPad"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.Ceiling)">
            <summary>
            Construct CompoundStructureLayersInfo from Ceiling
            </summary>
            <param name="ceiling"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.Floor)">
            <summary>
            Construct CompoundStructureLayersInfo from Floor
            </summary>
            <param name="floor"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.RoofBase)">
            <summary>
            Construct CompoundStructureLayersInfo from Roof
            </summary>
            <param name="roofBase"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.#ctor(Autodesk.Revit.DB.Wall)">
            <summary>
            Construct CompoundStructureLayersInfo from Wall
            </summary>
            <param name="wall"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CompoundStructureLayersInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.CropRegionOffsetSettings">
            <summary>
            Crop Region Offset Settings
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.Bottom">
            <summary>
            Bottom Offset
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.Right">
            <summary>
            Right Offset
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.Top">
            <summary>
            Top Offset
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.Left">
            <summary>
            Left Offset
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.IsSymmetric">
            <summary>
            Indicates if the Crop Region Offset Settings are symmetric
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.Unchanged">
            <summary>
            Indicates if the Crop Region Offset Settings is unchanged
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.GetSymmetric(System.Double)">
            <summary>
            Get Symmetric Crop Region Offset Settings
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.GetAsymmetric(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get Asymmetric Crop Region Offset Settings
            </summary>
            <param name="bottom">Bottom offset</param>
            <param name="right">Right Offset</param>
            <param name="top">Top offset</param>
            <param name="left">Left offset</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.GetCropRegionShape(Autodesk.Revit.DB.View,Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line,Autodesk.DesignScript.Geometry.Line)">
            <summary>
            Get Crop Region Shape for this Crop Region Offset Settings, based on a View and a set of Lines
            </summary>
            <param name="view"></param>
            <param name="bottomLine"></param>
            <param name="rightLine"></param>
            <param name="topLine"></param>
            <param name="leftLine"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.CropRegionOffsetSettings.ToString">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.EqualityComparers.ElementComparer">
            <summary>
            Custom comparer for Revit Elements
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.EqualityComparers.ElementComparer.Equals(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Element)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.EqualityComparers.ElementComparer.GetHashCode(Autodesk.Revit.DB.Element)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.EqualityComparers.ElementReferenceComparer">
            <summary>
            Custom comparer for Revit References obtained from Elements
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.EqualityComparers.ElementReferenceComparer.Equals(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.Reference)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.EqualityComparers.ElementReferenceComparer.GetHashCode(Autodesk.Revit.DB.Reference)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.GetUnitsResultData">
            <summary>
            Represents the data resulting from an attempt to retrieve the unit type or specification ID
            along with a description and result status.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.GetUnitsResultData.UnitTypeOrSpecId">
            <summary>
            The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> of get units operation.
            </summary>
            <remarks>
            <para>
            Depending on the context some errors might occur. In those cases, returned value could be a
            <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>, instead the desired <see cref="T:Autodesk.Revit.DB.UnitTypeId"/>.
            </para>
            <para>
            <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> represents: meters, square meters, cubic meters etc.
            </para>
            <para>
            <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> represents: length, area, volume etc.
            </para>
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.GetUnitsResultData.Description">
            <summary>
            A description of the unit type or specification.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.GetUnitsResultData.Result">
            <summary>
            The result of the retrieval operation.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.GetUnitsResultData.#ctor(Autodesk.Revit.DB.ForgeTypeId,System.String,DynamoForRevitUtils.Enumerations.AccessParameterResult)">
            <summary>
            Constructs a new instance of <see cref="T:DynamoForRevitUtils.Entities.GetUnitsResultData"/>.
            </summary>
            <param name="unitTypeOrSpecId">
            The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> or <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> of get units operation.
            </param>
            <param name="description">
            A description of result
            </param>
            <param name="result">
            Enum that represents the result of the retrieval operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="unitTypeOrSpecId"/> or <paramref name="description"/> is null.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.GetUnitsResultData.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:DynamoForRevitUtils.Entities.GetUnitsResultData"/>.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.MEPCurveReferences">
            <summary>
            Class containing utils References from MEP Curves
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.MEPCurveReferences.RefArray">
            <summary>
            <see cref="T:Autodesk.Revit.DB.ReferenceArray"/> obtained from MEPCurve end faces
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.MEPCurveReferences.LocationCurve">
            <summary>
            MEPCurve location curve
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.MEPCurveReferences.ReferenceCS">
            <summary>
            MEPCurve base coordinate system
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.MEPCurveReferences.EndFaces">
            <summary>
            Extremity faces of MEPCurve
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.MEPCurveReferences.OwnerId">
            <summary>
            MEPCurve Id
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.MEPCurveReferences.#ctor(Autodesk.Revit.DB.ReferenceArray,Autodesk.Revit.DB.Curve,Autodesk.DesignScript.Geometry.CoordinateSystem,System.Collections.Generic.List{Autodesk.Revit.DB.Face},Autodesk.Revit.DB.ElementId)">
            <summary>
            Constructor for MEPCurveReferences
            </summary>
            <param name="refArray">Array of references</param>
            <param name="locationCurve">Location curve</param>
            <param name="referenceCS">Reference coordinate system</param>
            <param name="endFaces">End faces</param>
            <param name="ownerId">Id of the MEPCurveReferences owner</param>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions">
            <summary>
            Represents options for retrieving parameters of elements using Dynamo for Revit utilities.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions.AccessMode">
            <summary>
            Gets the mode of access for parameters, specifying how parameters are handled
            when retrieving element parameter options.
            </summary>
            <remarks>
            The <c>mode</c> property defines the behavior for accessing parameters, such as whether
            only the parameter itself is retrieved or the parameter along with its value.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions.DoubleParameterConvertionMode">
            <summary>
            Defines the mode of conversion for double-type parameter values in Dynamo for Revit utilities.
            </summary>
            <remarks>
            The conversion mode determines how double parameters are interpreted,
            especially in relation to document-specific units or unconverted values.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions.Regex">
            <summary>
            Gets the regular expression (Regex) used to filter or match parameters during the process of
            retrieving element parameters. A null value indicates that no filtering will occur based on a
            regular expression.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions.CheckIfValueContainsInvalidChars">
            <summary>
            Specifies whether to validate string values for invalid characters when retrieving element parameters.
            </summary>
            <remarks>
            Invalid chars are line breaks or tabs ('\n', '\t', '\r')
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions.GetElementIdValueAsString">
            <summary>
            Determines whether element IDs should be retrieved and represented as string values
            when accessing parameter values.
            </summary>
            <remarks>
            This property specifies if the values of the element IDs are formatted as strings
            during the retrieval process, providing a flexible way to handle these identifiers.
            </remarks>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo">
            <summary>
            Represents the data associated with accessing a parameter, including its value, a description,
            and the result of the access operation.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo.Parameter">
            <summary>
            The value of the element parameter.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo.Description">
            <summary>
            A description of the parameter.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo.Result">
            <summary>
            The result of the parameter access operation.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo.#ctor(DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter,System.String,System.Nullable{DynamoForRevitUtils.Enumerations.AccessParameterResult})">
            <summary>
            Constructs a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo"/>.
            </summary>
            <param name="parameter">
            The element parameter used in the access operation.
            </param>
            <param name="description">
            A description of the parameter access operation.
            </param>
            <param name="result">
            The result of the parameter access operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="parameter"/> or <paramref name="description"/> is null.
            </exception>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute">
            <summary>
            Attribute used to create a bound between an <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper"/> property
            and a <see cref="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap"/> property
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute.PropertyName">
            <summary>
            Gets the name of the parameter property associated with the property.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute"/>
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter">
            <summary>
            Represents a parameter of a Revit element within the Dynamo for Revit utilities.
            </summary>
            <remarks>
            This class acts as a wrapper around Revit's <see cref="T:Autodesk.Revit.DB.Parameter"/> object
            and provides access to the parameter's metadata, value, and additional contextual information
            necessary in the Dynamo for Revit environment.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.RevitParameter">
            <summary>
            The Revit Parameter
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.BuiltInParameter">
            <summary>
            A built-in parameter within a Revit element, used to reference predefined parameters
            in the Autodesk Revit API.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.IsBuiltInParameter">
            <summary>
            Indicates whether the ElementParameter represents a built-in parameter in Revit.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.OwnerElement">
            <summary>
            The Parameter owner Element
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Document">
            <summary>
            Document which the Parameter owner Element resides in
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Definition">
            <summary>
            The Parameter Definition
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Id">
            <summary>
            The Parameter Id
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.UnitTypeId">
            <summary>
            String representation of <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> associated with the parameter.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.SpecTypeId">
            <summary>
            String representation of <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> associated with the parameter.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Unit">
            <summary>
            Represents the <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> associated with the parameter as human-readable label.
            </summary>
            <remarks>
            The value depends on Revit language.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Spec">
            <summary>
            Represents the <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> associated with the parameter as human-readable label.
            </summary>
            <remarks>
            The value depends on Revit language.
            </remarks>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Name">
            <summary>
            User defined name for this Parameter
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.DataType">
            <summary>
            Represents the storage type of a parameter,
            indicating the data type that the parameter is expected to hold.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Kind">
            <summary>
            The Parameter Kind (Type or Instance)
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Value">
            <summary>
            Value of the parameter.
            </summary>
            <exception cref="T:System.ArgumentException">
            <para>
            Thrown when the value to set is not valid for the <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> of the parameter.
            </para>
            Accepted types are:
            <see cref="T:System.Boolean"/>,
            <see cref="T:DynamoForRevitUtils.Enumerations.ElementParameterYesNoValue"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.String"/>,
            <see cref="T:Autodesk.Revit.DB.ElementId"/>.
            </exception>
            <remarks>
            Values of type <see cref="T:System.Double"/> must be considered in Display Units.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.#ctor(Autodesk.Revit.DB.Parameter)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> from Revit parameter
            </summary>
            <param name="revitParameter">
            Revit parameter to bound with the <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.#ctor(Autodesk.Revit.DB.Parameter,DynamoForRevitUtils.Enumerations.ParameterKind)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> from Revit parameter and <see cref="T:DynamoForRevitUtils.Enumerations.ParameterKind"/>
            </summary>
            <param name="revitParameter">
            Revit parameter to bound with the <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>
            </param>
            <param name="kind">
            <see cref="T:DynamoForRevitUtils.Enumerations.ParameterKind"/> <c>enum</c> that defines if the parameter is a type or instance.
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.#ctor(System.String,DynamoForRevitUtils.Enumerations.ParameterDataType,DynamoForRevitUtils.Enumerations.ParameterKind)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> that will be used for data manipulation.
            </summary>
            <param name="name">The parameter name</param>
            <param name="dataType">
            <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> <c>enum</c> that defines the data type of the parameter.
            </param>
            <param name="kind">
            <see cref="T:DynamoForRevitUtils.Enumerations.ParameterKind"/> <c>enum</c> that defines if the parameter is a type or instance.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the provided <paramref name="name"/> is <c>null</c> or empty.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.#ctor(Autodesk.Revit.DB.BuiltInParameter,DynamoForRevitUtils.Enumerations.ParameterDataType,DynamoForRevitUtils.Enumerations.ParameterKind)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> that will be used for data manipulation.
            </summary>
            <param name="builtInParameter">
            The <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.BuiltInParameter"/> representing this <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>
            </param>
            <param name="dataType">
            <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> <c>enum</c> that defines the data type of the parameter.
            </param>
            <param name="kind">
            <see cref="T:DynamoForRevitUtils.Enumerations.ParameterKind"/> <c>enum</c> that defines if the parameter is a type or instance.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the is not possible to get Revit UI name to <paramref name="builtInParameter"/>.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Clone">
            <summary>
            Creates a new instance of the <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> class with the same name,
            data type, and kind as the current instance.
            </summary>
            <returns>
            A new <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> object with properties copied from the original instance.
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.GetDisplayUnits">
            <summary>
            Retrieves the display units for the parameter based on its specification type
            and the document's unit settings.
            </summary>
            <returns>
            A <see cref="T:DynamoForRevitUtils.Entities.GetUnitsResultData"/> object containing the <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.UnitTypeId"/> or <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.SpecTypeId"/>,
            a message describing the result, and the overall success or failure of the unit retrieval.
            </returns>
            <remarks>
            <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.SpecTypeId"/> is returned in case the parameter specification is not computable.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Invalid">
            <summary>
            Gets an invalid instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> with undefined data type and parameter kind.
            </summary>
            <returns>
            An <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> instance representing an invalid parameter.
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.op_Equality(DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter,DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.op_Inequality(DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter,DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor">
            <summary>
            Class used to access properties from a <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper"/> using <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>
            </summary>
            <remarks>
            <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper"/> must have properties with <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute"/>
            to map the property to the correspondent <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>.
            </remarks>
            <example>
            <code type="csharp">
            [AssociatedParameterPropertyName(nameof(ViewCommonParameters.DetailNumber))]
            public string DetailNumber {
                get => ViewWrapper.ElementParameterAccessor.GetStringValue();
                set => ViewWrapper.ElementParameterAccessor.SetValue(value);
            }
            </code>
            </example>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.#ctor(DynamoForRevitUtils.Entities.Wrappers.ElementWrapper)">
            <summary>
            Creates a new instance of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor"/> using the given FamilyInstanceWrapper.
            </summary>
            <param name="elementWrapper">The FamilyInstanceWrapper to get parameters from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the familyInstanceWrapper is null.</exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.GetDoubleValue(System.String)">
            <summary>
            Retrieves the double value of a property using its name to get the correspondent
            <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <remarks>
            <b>Property name must be the same as the parameter name without the suffix "Parameter".</b>
            </remarks>
            <returns>The value of the property as a double.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.GetStringValue(System.String)">
            <summary>
            Retrieves the string value of a property using its name to get the correspondent
            <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <remarks>
            <b>Property name must be the same as the parameter name without the suffix "Parameter".</b>
            </remarks>
            <returns>The value of the property as a double.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.GetElementIdValue(System.String)">
            <summary>
            Retrieves the element ID value for a specified property of the given Revit instance.
            </summary>
            <param name="propertyName">The name of the property to get the element ID value from. If not specified, the caller's name is used.</param>
            <returns>The element ID value associated with the specified property, or null if the property does not exist or has no associated element ID.</returns>
            <remarks>
            <b>Property name must be the same as the parameter name without the suffix "Parameter".</b>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.GetIntegerValue(System.String)">
            <summary>
            Retrieves the integer value of a specified property using the associated Revit parameter.
            </summary>
            <param name="propertyName">The name of the property to retrieve the integer value for. This is optional and defaults to the caller's name.</param>
            <returns>The integer value of the specified property based on its Revit parameter.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.GetBoolValue(System.String)">
            <summary>
            Retrieves the boolean value of the parameter mapped to the given property name.
            </summary>
            <param name="propertyName">The name of the property associated with the parameter. Defaults to the caller member name if not provided.</param>
            <returns>
            A boolean value indicating the parameter's value. Returns true if the integer representation of the parameter equals 1, otherwise false.
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.SetValue(System.Double,Autodesk.Revit.DB.ForgeTypeId,System.String)">
            <summary>
            Sets a double value to the parameter associated with the specified property.
            </summary>
            <param name="value">The double value to set on the parameter.</param>
            <param name="specTypeId">
            <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> used to convert the value to the correct unit.
            </param>
            <param name="propertyName">
            The name of the property to which the value will be set.
            Defaults to the caller member's name if not provided.
            </param>
            <exception cref="T:System.InvalidOperationException">The parameter is read-only</exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.SetValue(System.String,System.String)">
            <summary>
            Sets the string value of a parameter associated with the specified property.
            </summary>
            <param name="value">The string value to set.</param>
            <param name="propertyName">
            The name of the property associated with the parameter. This is optional and will be
            automatically provided by the caller's member name if not explicitly specified.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The parameter is read-only, or the parameter is not a shared parameter,
            or the shared parameter has HideWhenNoValue set to false.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.SetValue(Autodesk.Revit.DB.ElementId,System.String)">
            <summary>
            Sets the ElementId value of a parameter associated with the specified property.
            </summary>
            <param name="value">The ElementId to set on the parameter.</param>
            <param name="propertyName">
            The name of the property associated with the parameter.
            The default is the caller's name.
            </param>
            <exception cref="T:System.InvalidOperationException">The parameter is read-only</exception>
            <exception cref="T:System.ArgumentNullException">Value must be a finite number.</exception>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.SetValue(System.Int32,System.String)">
            <summary>
            Sets the integer value of the parameter associated with the specified property.
            </summary>
            <param name="value">The integer value to set.</param>
            <param name="propertyName">
            The name of the property whose associated parameter will be set.
            If null, the caller member name will be used.
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the property name is null or empty.</exception> 
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor.SetValue(System.Boolean,System.String)">
            <summary>
            Sets the value of a property tied to a <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> on the associated <see cref="F:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterAccessor._elementWrapper"/>.
            </summary>
            <param name="value">The value to be set for the specified property.</param>
            <param name="propertyName">The name of the property to set the value for. If not explicitly provided, it will use the caller's name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the propertyName is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the property cannot be mapped to a valid parameter in <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>.</exception>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMap`1">
            <summary>
            Object that holds element parameters
            </summary>
            <typeparam name="T">
            Defines the type of the derived class, which is used to access properties of the derived class
            at compile time.
            </typeparam>
            <remarks>
            This class implements the Curiously Recurring Template Pattern (CRTP) by using a generic type parameter <typeparamref name="T"/>
            that represents the derived class itself. This pattern enables static polymorphism, allowing the base class
            to use functionality from the derived class at compile time. In the GetItems method, this pattern allows
            the base class to access properties of the derived class through reflection while maintaining type safety.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMap`1.GetItems">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem">
            <summary>
            Represents a mapping item between a property name and an associated <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem.ElementParameter"/>
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem.PropertyName">
            <summary>
            Gets the name of the property associated with an <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem.ElementParameter"/>.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem.ElementParameter">
            <summary>
            Represents an element parameter within the Dynamo for Revit utilities framework.
            This property is used in mapping items to associate a specific property with an
            instance of <see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameterMapItem.ElementParameter"/>.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.PickSelectionFilters.CategorySelectionFilter">
            <summary>
            Category selection filter
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.CategorySelectionFilter.#ctor(System.Boolean,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Constructs a new SelectionFilter based on a given BuiltInCategory
            </summary>
            <param name="allowLinkedElements">Whether allow linked elements or not</param>
            <param name="bit">Category to filter</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.CategorySelectionFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            Whether provided element from given BuiltInCategory is allowed on filter or not.
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.CategorySelectionFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <summary>
            If references area allowed
            </summary>
            <param name="reference"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.PickSelectionFilters.MultiCategorySelectionFilter">
            <summary>
            Category selection filter
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.MultiCategorySelectionFilter.#ctor(System.Boolean,Autodesk.Revit.DB.BuiltInCategory[])">
            <summary>
            Constructs a new SelectionFilter based on BuiltInCategory array
            </summary>
            <param name="allowLinkedElements">Whether allow linked elements or not</param>
            <param name="bits">BuiltInCategories to filter</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.MultiCategorySelectionFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            Whether provided element from given BuiltInCategory is allowed on filter or not.
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.MultiCategorySelectionFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <summary>
            If references area allowed
            </summary>
            <param name="reference"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.PickSelectionFilters.NoFilter">
            <summary>
            Selection filter that allows all elements
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.NoFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.NoFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter">
            <summary>
            Base class for Pick Selection Filters
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.Categories">
            <summary>
            Categories to filter
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.AllowLinkedElements">
            <summary>
            If linked elements are allowed
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.#ctor">
            <summary>
            Constructor for PickSelectionFilter
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.BuiltInCategory})">
            <summary>
            Constructor for PickSelectionFilter by Categories
            </summary>
            <param name="allowLinkedElements">Whether allow linked elements or not</param>
            <param name="categories">Categories to filter</param>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.PickSelectionFilters.WallSelectionFilter">
            <summary>
            Wall selection filter based on WallKind
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.WallSelectionFilter.#ctor(Autodesk.Revit.DB.WallKind,System.Boolean)">
            <summary>
            Constructs a WallSelectionFilter by WallKind. Only allow System Walls of given kind
            </summary>
            <param name="wallKind"></param>
            <param name="allowLinkedElements"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.WallSelectionFilter.AllowElement(Autodesk.Revit.DB.Element)">
            <summary>
            Only allow System Walls of given kind
            </summary>
            <param name="elem">Element to filter</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.WallSelectionFilter.AllowReference(Autodesk.Revit.DB.Reference,Autodesk.Revit.DB.XYZ)">
            <inheritdoc />
        </member>
        <member name="M:DynamoForRevitUtils.Entities.PickSelectionFilters.WallSelectionFilter.IsElementValidWall(Autodesk.Revit.DB.Element)">
            <summary>
            Check if element is a valid wall
            </summary>
            <param name="elem">Element to check</param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Section">
            <summary>
            Object that holds information about a Revit Section View
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Section.SectionView">
            <summary>
            Revit View representing Section View
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Section.Data">
            <summary>
            Section view creation data
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Section.Create(Autodesk.Revit.DB.Document,DynamoForRevitUtils.Entities.SectionCreationData,Autodesk.Revit.DB.ViewFamilyType,System.UInt16,System.Boolean,Autodesk.Revit.DB.View)">
            <summary>
            Creates a new Section View on Revit Document based on section creation data object. 
            </summary>
            <param name="document">Revit Document</param>
            <param name="data">Section creation data</param>
            <param name="viewFamilyType">Section view family type</param>
            <param name="scale">Section view scale</param>
            <param name="flip">Choose whether you wants to flip the Section View or not</param>
            <param name="viewTemplate">View template to be applied on the Section View</param>
            <returns>Created Section as Section Object</returns>
            <remarks>
            MUST BE USED INSIDE A TRANSACTION !
            </remarks>
            <seealso href="http://help.autodesk.com/view/RVT/2026/ENU/?guid=Revit_API_Revit_API_Developers_Guide_Basic_Interaction_with_Revit_Elements_Views_About_views_html">
            Revit API Developer Guide - About views
            </seealso>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.SectionCreationData">
            <summary>
            Object that holds data to create a Section View in Revit
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.Axis">
            <summary>
            Axis to create Section
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.FarClipOffset">
            <summary>
            Section View far clip offset 
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.CropValue">
            <summary>
            Section view port opening value. Use this property for symmetric crop regions
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.XPosOffset">
            <summary>
            Right direction offset. Use this property for asymmetric crop regions.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.XNegOffset">
            <summary>
            Right direction reversed offset. Use this property for asymmetric crop regions.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.YPosOffset">
            <summary>
            Up direction offset. Use this property for asymmetric crop regions.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SectionCreationData.YNegOffset">
            <summary>
            Up direction reversed offset. Use this property for asymmetric crop regions.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SectionCreationData.#ctor(DynamoForRevitUtils.Entities.Axis,System.Double,System.Double)">
            <summary>
            Use this overload to create Section Views with SYMMETRIC crop regions
            </summary>
            <param name="axis">Axis used to create Section View</param>
            <param name="farClipOffset">Value representing the Section View deepness</param>
            <param name="cropValue">Value representing the Section view port opening</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SectionCreationData.#ctor(DynamoForRevitUtils.Entities.Axis,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Use this overload to create Section Views with ASYMMETRIC crop regions
            </summary>
            <param name="axis">Axis used to create Section View</param>
            <param name="farClipOffset">Value representing the Section View deepness</param>
            <param name="cropValue">Value representing the Section view port opening</param>
            <param name="xPosOffset">Right direction offset. Use this argument for asymmetric crop regions.</param>
            <param name="xNegOffset">Right direction reversed offset. Use this argument for asymmetric crop regions.</param>
            <param name="yPosOffset">Up direction offset. Use this argument for asymmetric crop regions.</param>
            <param name="yNegOffset">Up direction reversed offset. Use this argument for asymmetric crop regions.</param>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.SelectionResults">
            <summary>
            Class containing Data of Selection
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.Elements">
            <summary>
            Elements selected
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.GroupedElements">
            <summary>
            Elements grouped by selected categories
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.GroupedRevitLinkInstances">
            <summary>
            RevitLinkInstances grouped by selected categories
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.RevitLinkInstances">
            <summary>
            Link instance selected
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.ActiveView">
            <summary>
            Active view
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionResults.Settings">
            <summary>
            Settings of Selection
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionResults.ToDictionary">
            <summary>
            Converts SelectionResults to a dictionary where:
            <list type="bullet">
                <item>Key: Element (Selected element)</item>
                <item>Value: RevitLinkInstance (All RevitLinkInstances which the element belongs to)</item>
            </list>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionResults.GroupByCategory">
            <summary>
            Returns a main List containing two lists:
            <list type="table">
                <item>
                    <term>[0]</term>
                    <description>Elements grouped by selected categories</description>
                </item>
                <item>
                    <term>[1]</term>
                    <description>RevitLinkInstances grouped by selected categories</description>
                </item>
            </list>
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionResults.ToString">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.SelectionSettings">
            <summary>
            Class containing Selection Data used in Revit UI Selection
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionSettings.ObjectType">
            <summary>
            Object type to pickSelectionFilter
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionSettings.PickSelectionFilter">
            <summary>
            Filter used when picking elements
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionSettings.CollectorFilter">
            <summary>
            Filter used by <see cref="T:FilteredElementCollector"/>
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.SelectionSettings.Prompt">
            <summary>
            Selection prompt showed to user on Revit status bar
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.#ctor(System.String,Autodesk.Revit.UI.Selection.ObjectType)">
            <summary>
            Constructs a new SelectionData
            </summary>
            <param name="prompt">Selection prompt showed to user on Revit status bar</param>
            <param name="objectType">Type of object to be selected</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.#ctor(System.String,Autodesk.Revit.UI.Selection.ObjectType,DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter)">
            <summary>
            Constructs a new SelectionData
            </summary>
            <param name="prompt">Selection prompt showed to user on Revit status bar</param>
            <param name="objectType">Type of object to be selected</param>
            <param name="pickSelectionFilter">PickSelectionFilter to be applied on pick selection</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.#ctor(System.String,Autodesk.Revit.UI.Selection.ObjectType,DynamoForRevitUtils.Entities.PickSelectionFilters.PickSelectionFilter,Autodesk.Revit.DB.ElementFilter)">
            <summary>
            Constructs a new SelectionData
            </summary>
            <param name="prompt">Selection prompt showed to user on Revit status bar</param>
            <param name="objectType">Type of object to be selected</param>
            <param name="pickSelectionFilter">PickSelectionFilter to be applied on pick selection</param>
            <param name="collectorFilter">Filter to be used for FilteredElementCollector</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.#ctor(Autodesk.Revit.DB.ElementFilter)">
            <summary>
            Constructs a new SelectionData
            </summary>
            <param name="collectorFilter">Filter to be used for FilteredElementCollector</param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.ShowElementsSelectionDialog(System.String,System.String)">
            <summary>
            Show elements selection dialog
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.SelectionSettings.ToString">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.WallElevation">
            <summary>
            Class containing data to create a Wall Elevation
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.WallNormal">
            <summary>
            Wall normal vector
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if assigned value was null</exception>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.WallBaseLine">
            <summary>
            Line created by Location Curve of Wall, by getting its StartPoint and EndPoint
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.WallLocationCurve">
            <summary>
            Wall location curve as returned by Revit API
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.WallMidPoint">
            <summary>
            Wall location curve mid point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.WallCenterPoint">
            <summary>
            Wall base line mid point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.ElevationPoint">
            <summary>
            Elevation Marker Location Point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.FarClipOffset">
            <summary>
            Elevation Far Clip Offset calculated from Wall Width and Elevation Point
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.Name">
            <summary>
            Elevation View Name
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.Wall">
            <summary>
            Wall associated with Elevation
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.ViewFamilyType">
            <summary>
            Elevation View Family Type
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.Scale">
            <summary>
            Elevation View Scale
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.OffsetFromWall">
            <summary>
            Elevation Symbol offset from Wall
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.CropRegionOffsetSettings">
            <summary>
            Crop Region Shape offset from Wall
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.Flipped">
            <summary>
            Whether Elevation is flipped or not
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.Elevation">
            <summary>
            Elevation View Section
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.WallElevation.ElevationMarker">
            <summary>
            Elevation View Elevation Marker
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.WallElevation.#ctor(System.String,Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.ViewFamilyType,System.Double,System.Boolean,DynamoForRevitUtils.Entities.CropRegionOffsetSettings)">
            <summary>
            Construct object that holds data to create Wall Elevation
            </summary>
            <param name="name">Elevation View Name. Must be unique</param>
            <param name="wall">Revit Wall to create elevation</param>
            <param name="viewFamilyType">The Elevation Type</param>
            <param name="elevationOffset">Distance of Elevation Marker from Wall</param>
            <param name="flip">Whether elevation must be flipped or not</param>
            <param name="cropRegionOffsetSettings">
                Crop Region Shape offset settings.
                The default Crop Region Shape is defined by planar Wall boundary curves.
                Leave null to use default Crop Region Shape without offset.
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.WallElevation.CreateElevationView(Autodesk.Revit.DB.ViewPlan,System.Int32,Autodesk.Revit.DB.RevitLinkInstance,System.Boolean)">
            <summary>
            Creates a new Elevation View aligned to the Wall.
            </summary>
            <param name="viewPlan">Plan View to create elevation</param>
            <param name="scale">View scale</param>
            <param name="linkInstance">Revit Link Instance which Wall belongs</param>
            <param name="attachToGrid">
                Set true if you want to attach this Elevation to the Wall nearest parallel Grid.
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.WallElevation.ToString">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper">
            <summary>
                Represents an abstract base class for wrapping Revit elements.
            </summary>
            <remarks>
            <para>
                Use this class in conjunction with the <see cref="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap" /> and 
            <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute" /> to enhance the way you access element parameters.
            </para>
            <para>
                The <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper" /> class represents the Revit Element and the <see cref="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap" />
                represents the parameters of this element.
            </para>
            <para>
                To use these classes together, proceed as follows:
            <list type="number">
                <item>
                    Create a class derived from <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper" /> to represent specific characteristics
                    of the elements you want to represent.
                </item>
                <item>
                    Create properties of type <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter" /> in classes derived
                    from <see cref="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap" /> to represent element parameters.
                </item>
                <item>
                    Use the <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AssociatedElementParameterAttribute" /> attribute to create a bound between
                    properties of the <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper" /> with the properties of the  <see cref="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap" />
                </item>
                <item>
                    Use <see cref="P:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.ParameterAccessor" /> in getters/setters of properties of the <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper" />
                    to get/set the values of the parameters, directly from/to the element instances in Revit.
                </item>
            </list>
                This way you will no longer need to worry about fetching parameters from elements every time
                you need to get/set their values.
                Use the properties of the <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper" /> normally and their values
                will be automatically get/set from/to the element instances in Revit.
            </para>
            </remarks>
            <example name="ElementWrapper">
        <code language="csharp">
            [IsVisibleInDynamoLibrary(false)]
            public class CableTrayWrapper : ElementWrapper
            {
                internal CableTrayWrapper(
                    Element element,
                    params IEnumerable&lt;IElementParameterMap&gt; parameters
                ) : base(element, parameters) { }
    
                [AssociatedElementParameter(nameof(CableTrayParameters.Comments))]
                public string Comments {
                    get =&gt; ParameterAccessor.GetStringValue();
                    set =&gt; ParameterAccessor.SetValue(value);
                }
    
                [AssociatedElementParameter(nameof(CableTrayParameters.IDR))]
                public bool IDR {
                    get =&gt; ParameterAccessor.GetBoolValue();
                    set =&gt; ParameterAccessor.SetValue(value);
                }
    
                [AssociatedElementParameter(nameof(CableTrayParameters.Elevation))]
                public double Elevation {
                    get =&gt; ParameterAccessor.GetDoubleValue();
                    set =&gt; ParameterAccessor.SetValue(value, SpecTypeId.Length);
                }
            }
        </code>
    </example>
            <example name="ElementParameterMap">
        <code language="csharp">
            public class CableTrayParameters : ElementParameterMap&lt;CableTrayParameters&gt;
            {
                // Properties should be public. Recommended to be init.
                public ElementParameter Comments { get; init; }
    
                public ElementParameter IDR { get; init; }
    
                public ElementParameter Elevation { get; init; }
    
                // Constructor made private to not appear in Dynamo Library
                private CableTrayParameters() { }
    
                // Static constructor shown as Dynamo Node in Library
                public static CableTrayParameters Create(
                    ElementParameter comments,
                    ElementParameter idr,
                    ElementParameter elevation
                ) =&gt; new()
                {
                    Comments = comments,
                    IDR = idr,
                    Elevation = elevation
                };
            }
        </code>
    </example>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.#ctor(Autodesk.Revit.DB.Element,System.Collections.Generic.IEnumerable{DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap})">
            <summary>
            Constructs a new instance of <see cref="T:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper"/>.
            </summary>
            <param name="element">The <see cref="P:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.Element"/> to be wrapped.</param>
            <param name="parameterMaps">The parameter indexers associated with the element.</param>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.Element">
            <inheritdoc />
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.ParameterMaps">
            <inheritdoc />
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.ElementWrapper.ParameterAccessor">
            <inheritdoc />
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper">
            <summary>
            Represents an abstract wrapper class for Revit family instances.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper.#ctor(Autodesk.Revit.DB.FamilyInstance,System.Collections.Generic.IEnumerable{DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap})">
            <summary>
            Constructs a new instance of <see cref="T:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper"/>.
            </summary>
            <param name="famInst">The <see cref="P:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper.FamilyInstance"/> to be wrapped.</param>
            <param name="parameterMaps">The parameter associated with the family instance.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="famInst"/> is null.
            </exception>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper.FamilyInstance">
            <summary>
            Represents the wrapped <see cref="P:DynamoForRevitUtils.Entities.Wrappers.FamilyInstanceWrapper.FamilyInstance"/>.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap">
            <summary>
            Represents a mapping between property names and their corresponding element parameters.
            </summary>
            <remarks>
            This interface provides functionality to retrieve a collection of mappings that
            represent the relationship between property names and element parameters.
            It is intended to be implemented by classes to handle specific mappings.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Entities.Wrappers.IElementParameterMap.GetItems">
            <summary>
            Retrieves a collection of items that represent the mapping between property names
            and corresponding element parameters in an element parameter map.
            </summary>
            <returns>
            A collection of `ElementParameterMapItem` representing the mappings.
            </returns>
            <remarks>
            The method inspects the properties of the implementing type to identify
            properties of type `ElementParameter` and adds them to the list of map items.
            </remarks>
            <exception cref="T:System.Exception">
            Throw if no properties of type <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> are found.
            </exception>
        </member>
        <member name="T:DynamoForRevitUtils.Entities.Wrappers.IElementWrapper">
            <summary>
            Represents an interface for wrapping Revit elements.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.IElementWrapper.Element">
            <summary>
            Represents the Revit Element associated with this wrapper object.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.IElementWrapper.ParameterMaps">
            <summary>
            Parameter indexers associated with the element.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Entities.Wrappers.IElementWrapper.ParameterAccessor">
            <summary>
            Provides access to manipulate and retrieve parameter values of a
            Revit element through the associated element wrapper.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.AccessParameterMode">
            <summary>
            Represents the mode of access for parameters within the Dynamo for Revit utilities.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterMode.ParameterOnly">
            <summary>
            Specifies that the target parameter should be considered without its associated value.
            This mode is typically used when only the parameter's presence or metadata is relevant.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterMode.ParameterWithValue">
            <summary>
            Specifies that the target parameter, along with its associated value, should be considered.
            This mode is typically used when both the parameter's metadata and its value are relevant.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.AccessParameterResult">
            <summary>
            Indicates that a parameter value has been successfully set.
            </summary>
            <remarks>
            This result is returned when the operation completes successfully and the parameter value is updated to the specified input.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ValueFound">
            <summary>
            Represents a condition where the requested parameter value was successfully retrieved.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ValueNotFound">
            <summary>
            Represents a condition where the requested parameter value could not be retrieved
            because it is not present or accessible in the given context.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ParameterNotFound">
            <summary>
            Indicates that the specified parameter does not exist or cannot be located.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ParameterFound">
            <summary>
            Represents a condition where the specified element parameter is found.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.InvalidValue">
            <summary>
            Represents a condition where the retrieved parameter value is invalid or improperly formatted.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.InvalidDataType">
            <summary>
            Represents a scenario where the parameter data type is invalid or unrecognized.
            </summary>
            <remarks>
            This result indicates that the data type of the parameter does not conform
            to any known or supported types, making it unusable for further processing.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.InvalidUnitTypeId">
            <summary>
            Indicates that the unit type identifier associated with a parameter is invalid or unsupported.
            </summary>
            <remarks>
            <para>
            This result occurs when the unit type ID of the parameter is not recognized or does not match any valid unit type,
            which can prevent proper interpretation or usage of the parameter value.
            </para>
            <para>
            <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> represents: meters, square meters, cubic meters, etc./>
            </para>
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.InvalidSpecTypeId">
            <summary>
            Represents an invalid specification when attempting to retrieve units.
            </summary>
            <remarks>
            <para>
            This value indicates the operation encountered an issue specifically
            related to an invalid or unsupported specification.
            </para>
            <para>
            <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> represents: length, area, volume, etc.
            </para>
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.UnitFound">
            <summary>
            Represents a condition where the <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> associated
            with a parameter was successfully identified.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ElementNotFound">
            <summary>
            Indicates that the specified element could not be found.
            </summary>
            <remarks>
            This result is returned when an operation attempts to access an element that does not exist, is unavailable,
            or is outside the relevant scope or context.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.NullElementParameter">
            <summary>
            Represents a condition where the specified element parameter is null.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.InvalidElementKind">
            <summary>
            Indicates that the specified element's kind is invalid for the operation.
            </summary>
            <remarks>
            This result is returned when the operation encounters an element that has an unexpected or unsupported type,
            making it unsuitable for processing.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.AccessParameterResult.ValueSet">
            <summary>
            Indicates that the parameter value was successfully set.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.Coordinate">
            <summary>
            Enum to indicate the coordinate to be used
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.Coordinate.X">
            <summary>
            X Coordinate
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.Coordinate.Y">
            <summary>
            Y Coordinate
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.Coordinate.Z">
            <summary>
            Z Coordinate
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.DoubleParameterConvertionMode">
            <summary>
            Specifies the modes of conversion for double parameters.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.DoubleParameterConvertionMode.UseActiveDocumentUnits">
            <summary>
            Represents the option to use the current document display units
            for convertion of a double parameter.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.DoubleParameterConvertionMode.UseElementDocumentUnits">
            <summary>
            Represents the option to use the document display units
            of an element for double parameter convertion.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.ElementParameterYesNoValue">
            <summary>
            Represents the possible values for a yes or no parameter in a Revit element.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ElementParameterYesNoValue.Yes">
            <summary>
            Represents a "Yes" value in the context of ElementParameterYesNoValue
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ElementParameterYesNoValue.No">
            <summary>
            Represents the "No" value in
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.ParameterDataType">
            <summary>
            Represents an undefined storage type for <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> values.
            </summary>
            <remarks>
            This value is used as a default or placeholder to indicate that the data type
            has not been set or is not recognized within the context of the <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> enumeration.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.Boolean">
            <summary>
            Specifies that the parameter stores boolean values.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.YesNo">
            <summary>
            Specifies that the parameter stores boolean values represented as Yes or No.
            </summary>
            <remarks>
            This member is used to indicate that the parameter accepts <see cref="T:DynamoForRevitUtils.Enumerations.ElementParameterYesNoValue"/>.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.Integer">
            <summary>
            Specifies that the parameter stores integer values.
            </summary>
            <remarks>
            This member indicates that the parameter holds whole number data types.
            It is used when the parameter requires discrete numeric values
            within the context of Dynamo for Revit utilities.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.Decimal">
            <summary>
            Specifies that the parameter stores numerical values, including decimals.
            </summary>
            <remarks>
            This member is used to indicate that the parameter accepts floating-point
            or real numbers within the context of Dynamo for Revit utilities.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.Text">
            <summary>
            Specifies that the parameter stores text values.
            </summary>
            <remarks>
            This member is used to indicate that the parameter accepts string-based data
            within the context of Dynamo for Revit utilities.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.ElementId">
            <summary>
            Specifies that the parameter stores an ElementId value.
            </summary>
            <remarks>
            This member is used to represent parameters that are associated with references to other elements,
            identified by their unique ElementId, within the context of Dynamo for Revit utilities.
            </remarks>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterDataType.Undefined">
            <summary>
            Represents an undefined state for the data type of a parameter.
            </summary>
            <remarks>
            This value serves as a placeholder to indicate that the parameter's data type
            is either unspecified or unrecognized.
            </remarks>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.ParameterKind">
            <summary>
            Enum to define the kind of parameter
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterKind.Undefined">
            <summary>
            Undefined kind
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterKind.Type">
            <summary>
            Parameter of kind Type
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterKind.Instance">
            <summary>
            Parameter of kind Instance
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.ParameterValidationResult">
            <summary>
            Represents the validation options for a parameter.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterValidationResult.ValidValue">
            <summary>
            When the parameter value is valid.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterValidationResult.InvalidValue">
            <summary>
            When the parameter value is invalid.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterValidationResult.UndefinedStorageType">
            <summary>
            When the parameter StorageType is invalid.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterValidationResult.NotConvertibleValue">
            <summary>
            When the parameter value is not convertible
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.ParameterValidationResult.NotFound">
            <summary>
            Represents the validation result for a parameter.
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.RoofLineType">
            <summary>
            Enum that defines Roof Line Types. Used in Roof Tiles Generator
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.RoofLineType.Hip">
            <summary>
            Enum member for Hip in the RoofLineType enum. Represents a hip roof line type.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.RoofLineType.Ridge">
            <summary>
            Enum member that represents the ridge roof line type.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.RoofLineType.Valley">
            <summary>
            Enum that defines Roof Line Types.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.RoofLineType.Eave">
            <summary>
            The Eave represents an enum member of the RoofLineType enum.
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.RoofLineType.Undefined">
            <summary>
            Represents an undefined roof line type.
            </summary>
            <remarks>
            This value is used when the roof line type is not specified or cannot be determined.
            </remarks>
        </member>
        <member name="T:DynamoForRevitUtils.Enumerations.SelectionMethod">
            <summary>
            Enumeration containing Selection Methods for Selection Nodes usage
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.SelectionMethod.Manual">
            <summary>
            Enable selection nodes to method PickObjects
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.SelectionMethod.AllElements">
            <summary>
            Make selection nodes returns all objects from model
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Enumerations.SelectionMethod.AllElementsFromActiveView">
            <summary>
            Make selection nodes returns all objects from active view
            </summary>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collections.EnumerableServices">
            <summary>
            Provides utility methods for working with IEnumerable objects.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified collection has any elements.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="data">The collection to check.</param>
            <remarks><b>Null safe method</b></remarks>
            <returns>True if the collection has any elements; otherwise, false.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines whether the specified collection has any elements
            that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="data">The collection to check.</param>
            <param name="predicate">The predicate to test each element for a condition.</param>
            <remarks><b>Null safe method</b></remarks>
            <returns>True if the collection has any elements; otherwise, false.</returns>
            <example>
            <code>
            List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };
            Predicate&lt;int&gt; isEven = x => x % 2 == 0;
            bool hasEvenNumbers = numbers.HasAny(isEven); // returns true
            </code>
            </example>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes the specified action if the collection has any elements.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="data">The collection to check.</param>
            <param name="action">The action to execute on the collection.</param>
            <remarks><b>Null safe method</b></remarks>
            <example>
            <code>
            List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };
            numbers.DoIfHasAny(n => Console.WriteLine(n));
            </code>
            </example>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Executes the specified action if the collection has any elements that match the conditions
            defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="data">The collection to check.</param>
            <param name="predicate">The predicate to test each element for a condition.</param>
            <param name="action">The action to execute on the collection.</param>
            <remarks><b>Null safe method</b></remarks>
            <example>
            <code>
            var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };
            Predicate&lt;int&gt; isEven = x => x % 2 == 0;
            Action&lt;IEnumerable&lt;int&gt;&gt; print = x => Console.WriteLine(string.Join(", ", x));
            numbers.DoIfHasAny(isEven, print); // Outputs: "2, 4"
            </code>
            </example>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.CategoryCollectors">
            <summary>
            Revit Categories collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.CategoryCollectors.GetAllRevitCategories(Autodesk.Revit.DB.Document,System.Nullable{Autodesk.Revit.DB.CategoryType})">
            <summary>
            Returns all Revit Categories
            </summary>
            <param name="doc">Document to get categories</param>
            <param name="categoryType">Category Type to filter categories. Leave null to get all.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.CategoryCollectors.GetLinesSubCategories(Autodesk.Revit.DB.Document)">
            <summary>
            Get Lines Sub Categories
            </summary>
            <param name="doc">Revit Document to get Lines Sub Categories</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.CategoryCollectors.GetTagCategories">
            <summary>
            Get all Revit Tag Categories
            </summary>
            <returns>List of Tags built in Categories</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.GenericCollectors">
            <summary>
            Generic Collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.GenericCollectors.GetAllElementsOfCategory``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.View,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Get all elements of Category
            </summary>
            <param name="doc">Document to get elements</param>
            <param name="cat">Category to get elements</param>
            <param name="view">
                View to get visible elements in it. Leave null to not consider the view on filtering
            </param>
            <param name="filter">Filter to be applied on elements. Leave null to not apply.</param>
            <typeparam name="TCast">
                Type derived from <see cref="T:Autodesk.Revit.DB.Element"/> to cast collected elements
            </typeparam>
            <returns>Collected elements casted to <typeparamref name="TCast"/></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.GenericCollectors.GetAllElementTypesOfCategory``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Get all Element Types of Category
            </summary>
            <param name="doc">Document to get element types</param>
            <param name="cat">Category to get element types</param>
            <typeparam name="TCast">
                Type derived from <see cref="T:Autodesk.Revit.DB.Element"/> to cast collected elements
            </typeparam>
            <returns>Collected elements casted to <typeparamref name="TCast"/></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.GenericCollectors.GetAllFamilySymbolsOfCategory(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
                Get all Family Symbols (active or not) of Category.
            </summary>
            <param name="doc">Document to get family symbols</param>
            <param name="cat">Category to get family symbols</param>
            <returns>Collected Family Symbols</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.GenericCollectors.GetAllElementsOfClass``1(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View,Autodesk.Revit.DB.ElementFilter)">
            <summary>
                Get all elements of class.
            </summary>
            <param name="doc">Document to get elements</param>
            <param name="view">
                View to get visible elements in it. Leave null to not consider the view on filtering
            </param>
            <typeparam name="TClass">
                Derived class from <see cref="T:Autodesk.Revit.DB.Element"/> to get elements
            </typeparam>
            <param name="filter">Filter to be applied on elements. Leave null to not apply.</param>
            <returns>Collected Elements of type <typeparamref name="TClass"/></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.GenericCollectors.GetAllElementTypesOfClass``1(Autodesk.Revit.DB.Document)">
            <summary>
                Get all Element Types of class.
            </summary>
            <param name="doc">Document to get element types</param>
            <typeparam name="TClass">
                Derived class from <see cref="T:Autodesk.Revit.DB.ElementType"/> to get element types
            </typeparam>
            <returns>Collected ElementTypes of type <typeparamref name="TClass"/></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.LineStyleCollectors">
            <summary>
            Line Styles collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.LineStyleCollectors.AllProjectionStyles(Autodesk.Revit.DB.Document)">
            <summary>
            Collects all Projection Line Styles from Document
            </summary>
            <param name="doc">Revit Document to collect Line Styles</param>
            <returns>Line Styles</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.LineStyleCollectors.AllCutStyles(Autodesk.Revit.DB.Document)">
            <summary>
            Collects all Cut Line Styles from Document
            </summary>
            <param name="doc">Revit Document to collect Line Styles</param>
            <returns>Line Styles</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.PhaseCollectors">
            <summary>
            Phases collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.PhaseCollectors.GetPhaseIdByName(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Gets the Phase Id by its Name
            </summary>
            <param name="doc"></param>
            <param name="phaseName"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.RoomCollectors">
            <summary>
            Rooms collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetAllValidRooms(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View)">
            <summary>
            Gets all valid Rooms from Document
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetAllInvalidRooms(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View)">
            <summary>
            Gets all invalid Rooms from Document
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetValidRoomsFromActiveDesignOption(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View)">
            <summary>
            Gets all valid Rooms from Document from active Design option
            </summary>
            <param name="doc">Document to get Rooms</param>
            <param name="view">
                View to get visible elements in it. Leave null to not consider the view on filtering
            </param>
            <returns>Valid Rooms placed o active Design Option</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetValidRoomsFromDesignOption(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
            Gets all valid Rooms from Document from active Design option
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetRoomFinishes(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Architecture.Room,Autodesk.Revit.DB.SpatialElementGeometryCalculator,Autodesk.Revit.DB.SubfaceType,System.Boolean)">
            <summary>
            Gets Room finishes given a SubFaceType
            </summary>
            <param name="doc"></param>
            <param name="room"></param>
            <param name="calculator"></param>
            <param name="subfaceType">SubFaceType to get finishes. Could be: Bottom, Top or Side</param>
            <param name="includeLinkedElements">Whether include linked elements in collector</param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors._getBoundaryFacesHostElements(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Autodesk.Revit.DB.SpatialElementBoundarySubface},Autodesk.Revit.DB.SubfaceType,System.Boolean)">
            <summary>
            Gets Host Elements of Boundary Faces
            </summary>
            <param name="doc"></param>
            <param name="boundaryFaces"></param>
            <param name="subfaceType"></param>
            <param name="includeLinkedElements"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetAllRoomSeparationLines(Autodesk.Revit.DB.Document)">
            <summary>
            Get all Room Separation Lines from Document
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.RoomCollectors.GetRoomSeparationLinesFromDesignOption(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId)">
            <summary>
            Get all Room Separation Lines from Document from Design Option
            </summary>
            <param name="doc"></param>
            <param name="designOptionId"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Collectors.WallCollectors">
            <summary>
            Walls collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Collectors.WallCollectors.GetBasic(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.View)">
            <summary>
            Get all Basic Walls from Document
            </summary>
            <param name="doc"></param>
            <param name="view">
                View to get visible elements in it. Leave null to not consider the view on filtering
            </param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices">
            <summary>
            Dynamo BoundingBox utils
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetCentroid(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box centroid
            </summary>
            <param name="bbox">Bounding box to get centroid</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetBottomCenter(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box bottom face center
            </summary>
            <param name="bbox">Bounding box to get bottom center</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetTopCenter(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box top face center
            </summary>
            <param name="bbox">Bounding box to get top center</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetSurfaces(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box surfaces
            </summary>
            <param name="bbox">Bounding box to get surfaces</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetBottomSurface(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box bottom surface
            </summary>
            <param name="bbox">Bounding box to get bottom surface</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetTopSurface(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box bottom surface
            </summary>
            <param name="bbox">Bounding box to get top surface</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetVertices(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box vertices
            </summary>
            <param name="bbox">Bounding box to get vertices</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetEdges(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box edges
            </summary>
            <param name="bbox">Bounding box to get edges</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetDiagonal(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box diagonal
            </summary>
            <param name="bbox">Bounding box to get main diagonal</param>
            <remarks>
            Main diagonal is the diagonal that starts at the bounding box min point and
            ends at the bounding box max point.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetBottomSurfaceDiagonal(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box bottom surface diagonal
            </summary>
            <remarks>
            Bottom diagonal is the diagonal that starts at the bounding box min point and
            ends at the bounding box max point projected on bottom surface.
            </remarks>
            <param name="bbox">Bounding box to get bottom surface diagonal</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetOppositeBottomSurfaceDiagonal(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box opposite bottom surface diagonal
            </summary>
            <remarks>
            <para>Opposite bottom diagonal is the diagonal perpendicular to bottom diagonal.</para>
            <para>Start point (max.X, min.Y, min.Z)</para>
            <para>End point (min.X, max.Y, min.Z). </para>
            </remarks>
            <param name="bbox">Bounding box to get bottom surface diagonal</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetWidth(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box diagonal width
            </summary>
            <param name="bbox">Bounding box to get width</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetLength(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box diagonal length
            </summary>
            <param name="bbox">Bounding box to get length</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetHeight(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box diagonal height
            </summary>
            <param name="bbox">Bounding box to get height</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.GetDiagonalLength(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Get bounding box diagonal length
            </summary>
            <param name="bbox">Bounding box to get diagonal length</param>
            <remarks>
            Bottom diagonal is the diagonal that starts at the bounding box min point and
            ends at the bounding box max point projected to the bottom surface.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.ToCoordinateSystem(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Converts bounding box to coordinate system
            </summary>
            <param name="bbox">Bounding box to get coordinate system</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.Offset(Autodesk.DesignScript.Geometry.BoundingBox,System.Double)">
            <summary>
            Offset bounding box
            </summary>
            <param name="bbox">Bounding box to get offset</param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.AddPoint(Autodesk.DesignScript.Geometry.BoundingBox,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Expand bounding box using a point
            </summary>
            <param name="bbox">Bounding box to offset by adding a point.</param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.BoundingBoxServices.ToBoundingBoxXYZ(Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Converts a Dynamo Geometry BoundingBox to Revit API BoundingBoxXYZ
            </summary>
            <param name="bbox">Bounding box to convert</param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices">
            <summary>
            Revit geometry tools
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.IsVertical(Autodesk.DesignScript.Geometry.Surface,System.UInt16)">
            <summary>
            Verify if a given surface is vertical
            </summary>
            <param name="surface">Surface to analyze</param>
            <param name="approximation">A positive integer representing the rounding precision</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.IsHorizontal(Autodesk.DesignScript.Geometry.Surface,System.UInt16)">
            <summary>
            Verify if a given surface is horizontal
            </summary>
            <param name="surface">Surface to analyze</param>
            <param name="approximation">A positive integer representing the rounding precision</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.IsParallelTo(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector,System.UInt16)">
            <summary>
            Verify if two vectors are parallel
            </summary>
            <param name="vector"></param>
            <param name="otherVector"></param>
            <param name="approximation">A positive integer representing the rounding precision</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.IsPerpendicularTo(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector,System.UInt16)">
            <summary>
            Verify if two vectors are perpendicular
            </summary>
            <param name="vector"></param>
            <param name="otherVector"></param>
            <param name="approximation"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.GetMidPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Get the mid point between two points
            </summary>
            <param name="point"></param>
            <param name="otherPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.ArePointsCollinear(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,System.Double)">
            <summary>
            Evaluates if given three points are collinear by a given tolerance
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="tolerance"></param>
            <returns>Whether the three points are collinear or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.ComputeAverageCenterPoint(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Point})">
            <summary>
            Computes the average center point from a list of points.
            </summary>
            <param name="points">The list of points</param>
            <returns>The average center point</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.ReorderLines(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line})">
            <summary>
            Reorders a list of lines based on their angle with respect to the average center point.
            </summary>
            <param name="lines">The list of lines to be reordered.</param>
            <returns>A new list of lines reordered based on their angle.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.GroupAlignedLines(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line},System.Double)">
            <summary>
            Group aligned Lines by a given tolerance
            </summary>
            <param name="lines"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.GetMeshSurfaces(Autodesk.DesignScript.Geometry.Mesh)">
            <summary>
            Gets mesh surfaces
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.GetRelativeCoordinatesOfPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Get the coordinates of a point relative to a Coordinate System
            </summary>
            <param name="point"></param>
            <param name="cs"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.Visualize(Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Point,DSCore.Color,System.Double)">
            <summary>
            Generates a Vector visualization in Dynamo
            </summary>
            <param name="vector">Vector to visualize</param>
            <param name="origin">Point that represents the vector origin for visualization on 3D space.</param>
            <param name="size">The size of vector visualization</param>
            <param name="color">Color to vector visualization</param>
            <returns>Vector visualization</returns>
            <search>
            Abstract, Geometry, AbstractGeometry, Vector, Visualization, VectorVisualization
            </search>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.Visualize(Autodesk.DesignScript.Geometry.CoordinateSystem,System.Double)">
            <summary>
            Generates a Coordinate System visualization in Dynamo
            </summary>
            <param name="cs">Coordinate System to visualize</param>
            <param name="size">The size of Coordinate System visualization</param>
            <returns>Coordinate System visualization</returns>
            <search>
            Abstract, Geometry, AbstractGeometry, CoordinateSystem, Visualization, CoordinateSystemVisualization
            </search>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.Visualize(Autodesk.DesignScript.Geometry.BoundingBox,DSCore.Color,System.Boolean)">
            <summary>
            Generates a Bounding Box Visualization in Dynamo
            </summary>
            <param name="bbox">Bounding Box to visualize</param>
            <param name="color">Bounding Box visualization color</param>
            <param name="wireFrame">Whether Bounding Box visualization as wire frame or not</param>
            <returns>Bounding Box visualization</returns>
            <search>
            Abstract, Geometry, AbstractGeometry, BoundingBox, Visualization, BoundingBoxVisualization
            </search>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.ToPolyCurve(System.Collections.Generic.IEnumerable{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Converts an enumerable of DynamoGeometry.Curve to a DynamoGeometry.PolyCurve
            </summary>
            <param name="curves"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.SwapCoordinateValue(Autodesk.DesignScript.Geometry.Point,DynamoForRevitUtils.Enumerations.Coordinate,System.Double)">
            <summary>
            Swap a coordinate value of a point
            </summary>
            <param name="point">Point to swap coordinate</param>
            <param name="coordinate">Coordinate to swap</param>
            <param name="value">New value that will be used on swapped coordinate</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if coordinate has an invalid value.</exception>
            <returns>Point with swapped coordinate</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.DynamoGeometryServices.SwapCoordinateValue(Autodesk.DesignScript.Geometry.Vector,DynamoForRevitUtils.Enumerations.Coordinate,System.Double)">
            <summary>
            Swap a coordinate value of a vector
            </summary>
            <param name="vector">Vector to swap coordinate</param>
            <param name="coordinate">Coordinate to swap</param>
            <param name="value">New value that will be used on swapped coordinate</param>
            <returns>Vector with swapped coordinate</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Dynamo.JoinLinesServices">
            <summary>
            Join Lines Services
            </summary>
            <remarks>
                <para>Based on Spring Nodes Functions - LineLoop.Merge. by Dimitar Venkov.</para>
                <para>@5devene | dimitar.ven@gmail.com</para>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.JoinLinesServices.JoinLinesIntoClosedPolyCurve(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Line},System.Boolean)">
            <summary>
            Joins a collection of lines into a closed <see cref="T:Autodesk.DesignScript.Geometry.PolyCurve"/>.
            </summary>
            <param name="lines">The collection of lines to join.</param>
            <param name="tryReorderLines">
            Optional. Specifies whether to try to reorder the lines before joining. Default is true.
            Use this option when the lines are not in the correct order to form a closed loop.
            </param>
            <returns>A closed <see cref="T:Autodesk.DesignScript.Geometry.PolyCurve"/> formed by joining the lines.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the collection of lines is empty.</exception>
            <exception cref="T:System.Exception">
            Thrown when the number of lines is not enough to form a closed loop.
            </exception>
            <exception cref="T:System.Exception">
            Thrown when was not possible to connect all lines.
            </exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices">
            <summary>
            Dynamo Elements Utils
            </summary> 
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.UnwrapElement``1(Revit.Elements.Element)">
            <summary>
            Unwraps a Dynamo Element to Revit API Element of generic type T
            </summary>
            <typeparam name="T">The class type of Revit API Element</typeparam>
            <param name="element">The Dynamo Element to be unwrapped</param>
            <returns>Unwrapped element</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.TryConvertToDSType``1(Autodesk.Revit.DB.Element)">
            <summary>
            Attempts to convert a Revit API Element to a Dynamo Element of generic type T.
            </summary>
            <typeparam name="T">The class type of Dynamo Element</typeparam>
            <param name="element">The Revit API Element to be converted</param>
            <returns>The converted Dynamo Element of type T</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the input element is null</exception>
            <exception cref="T:System.Exception">Thrown when the conversion fails</exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.ToBuiltInCategory(Revit.Elements.Category)">
            <summary>
            Convert a given Dynamo <see cref="T:Revit.Elements.Category"/> to its related BuiltInCategory
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.ToDynamoCategory(Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Convert a given BuiltInCategory to its related Dynamo <see cref="T:Revit.Elements.Category"/>
            </summary>
            <param name="bitcat">BuiltInCategory to be converted</param>
            <returns>Corresponding Dynamo Category</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.ToDynamoType(Autodesk.Revit.DB.Document)">
            <summary>
            <para>Convert Revit Document to Dynamo Document</para>
            <para>Reference:</para>
            https://github.com/johnpierson/RhythmForDynamo/blob/051c6a5c5f136758a948f8fdf73deffa46eff981/src/Rhythm/Utilities/Converters.cs#L29
            </summary>
            <param name="item">Revit Document</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.ToRevitDocument(Revit.Application.Document)">
            <summary>
            <para>Convert Dynamo Document to Revit Document</para>
            <para>Reference:</para>
            https://github.com/johnpierson/RhythmForDynamo/blob/051c6a5c5f136758a948f8fdf73deffa46eff981/src/Rhythm/Utilities/Converters.cs#L29
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.RevitElementsServices.GetProtoLocation(Autodesk.Revit.DB.Element)">
            <summary>
            Get Element Location as Dynamo Geometry
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Dynamo.TopographyServices">
            <summary>
             Provides methods to work with Topography elements.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.TopographyServices.TopographyToPolySurface(Revit.Elements.Topography)">
            <summary>
            Transforms a Topography into a PolysSurface.
            </summary>
            <param name="topography"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.TopographyServices.GetTopographySurfaces(Revit.Elements.Topography)">
            <summary>
            Transforms a Topography into a list of Surfaces.
            </summary>
            <param name="topography"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Dynamo.TopographyServices.PointProject(System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Surface},Autodesk.DesignScript.Geometry.Point)">
            <summary>
            Projects a point into a Topography surfaces list
            </summary>
            <param name="topoSurfaces"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Enumerations.Converters">
            <summary>
            Provides methods for converting custom enumeration types.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Enumerations.Converters.ToStorageType(DynamoForRevitUtils.Enumerations.ParameterDataType)">
            <summary>
            Converts a custom <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> to a corresponding Revit <see cref="T:Autodesk.Revit.DB.StorageType"/>.
            </summary>
            <param name="paramStorType">
            The <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> that needs to be converted.
            </param>
            <returns>
            The corresponding Revit <see cref="T:Autodesk.Revit.DB.StorageType"/> for the given <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided <paramref name="paramStorType"/> is not a recognized value.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Enumerations.Converters.ToParameterDataType(Autodesk.Revit.DB.StorageType)">
            <summary>
            Converts a Revit <see cref="T:Autodesk.Revit.DB.StorageType"/> to a corresponding custom <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/>.
            </summary>
            <param name="storageType">
            The <see cref="T:Autodesk.Revit.DB.StorageType"/> that needs to be converted.
            </param>
            <returns>
            The corresponding custom <see cref="T:DynamoForRevitUtils.Enumerations.ParameterDataType"/> for the given <see cref="T:Autodesk.Revit.DB.StorageType"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the provided <paramref name="storageType"/> is not a recognized value.
            </exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Enumerations.EnumParser">
            <summary>
            Class containing Enum Parsers
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Enumerations.EnumParser.ByValue``1(System.String)">
            <summary>
            <para>Generic parser for enums by string value</para>
            <see href="https://stackoverflow.com/questions/79126/create-generic-method-constraining-t-to-an-enum"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Enumerations.EnumParser.ByValue``1(System.Object)">
            <summary>
            <para>Generic parser for enums by object value</para>
            <see href="https://stackoverflow.com/questions/79126/create-generic-method-constraining-t-to-an-enum"/>
            </summary>
            <param name="value">Enum value to be casted</param>
            <typeparam name="T">Enum Type</typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Enumerations.EnumParser.ByValue(System.String,System.String,System.String)">
            <summary>
            Generic Enum parser for enums used in Dropdown NodeModel
            </summary>
            
            <param name="enumTypeFullName">
            <para>Enum Type full name. Could be obtained using <see cref="P:System.Type.FullName"/> property.</para>
            <i>Example:</i> <see langword="typeof"/>(<see cref="T:Autodesk.Revit.DB.StorageType"/>).<see langword="FullName"/>
            </param>
            
            <param name="enumAssemblyPath">
            <para>Enum Assembly path. Could be obtained using <see cref="T:Autodesk.Revit.DB.Location"/> property.</para>
            <i>Example:</i> <see langword="typeof"/>(<see cref="T:Autodesk.Revit.DB.StorageType"/>).<see langword="FullName"/>.<see langword="Location"/>
            </param>
            
            <param name="value">Value to parse</param>
            <exception cref="T:System.Exception">
            Thrown when is not possible to load enum Assembly, Type or field.
            </exception>
            <returns>
            Enum value as <see cref="T:System.Object"/>
            </returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Files.CSV">
            <summary>
            Utils methods for read/write CSV files
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Files.CSV.ReadFileFromPath(System.String,System.String,System.Boolean,System.Boolean,System.Object,System.Object)">
            <summary>
                Imports data from a CSV (comma separated values) file, put the items into a list and 
                transpose it if needed.
            </summary>
            <param name="filePath">CSV file to be converted into a list</param>
            <param name="delimiter">CSV delimiter.</param>
            <param name="transpose">Toggle to transpose the imported data</param>
            <param name="readAsString">Choose whether read all file as string or not</param>
            <param name="encodingObj">
                <see cref="T:System.Text.Encoding"/> as object. Define the encoding to be used for reading the file.
            </param>
            <param name="cultureInfoObj">
                <see cref="T:System.Globalization.CultureInfo"/> as object. Define the culture to be used for parsing the numbers.
            </param>
            <returns name="list">List containing the items in the CSV file</returns>
            <remarks>
            <paramref name="cultureInfoObj"/> and <paramref name="encodingObj"/> parsed as object to avoid exposing the
            <see cref="T:System.Globalization.CultureInfo"/> and <see cref="T:System.Text.Encoding"/> classes in the Dynamo Library.
            </remarks>
            <seealso href="https://github.com/DynamoDS/Dynamo/blob/master/src/Libraries/DSOffice/Excel.cs"/>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Files.CSV._ensureRowLength(System.Collections.Generic.List{System.Object[]},System.Int32)">
            <summary>
            The length of all arrays in CSVdatalist must be the same. If the length of the array
            is less than numberOfColumns, null is appended to the array to achieve the required length.  
            </summary>
            <param name="CSVdatalist">List containing CSV data</param>
            <param name="colNum">Number of columns</param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Files.CSV.WriteToFilePath(System.String,System.Object[][],System.String)">
            <summary>
             Write a list of lists into a file using a comma-separated values 
             format. Outer list represents rows, inner lists represent columns. 
            </summary>
            <param name="filePath">Path to write to</param>
            <param name="data">List of lists to write into CSV</param>
            <param name="delimiter">CSV delimiter. The accepted delimiters are ,;:\t|=</param>
            <seealso href="https://github.com/DynamoDS/Dynamo/blob/master/src/Libraries/DSOffice/Excel.cs"/>
            <search>write,text,file</search>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Files.Excel">
            <summary>
            Class containing utils for deal with Excel stuff
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Files.Excel.GetValidSheetName(System.String)">
            <summary>
            <para>Gets valid Excel sheet name from input string</para>
            
            Reference: <see href="https://www.excelcodex.com/2012/06/worksheets-naming-conventions/"/>
            </summary>
            <param name="inputString"></param>
            <returns>Valid Excel sheet name</returns>
            <exception cref="T:System.ArgumentException">Throw if input string is not valid</exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.GenericServices.ObjectServices">
            <summary>
            Generic services for objects.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.GenericServices.ObjectServices.TryCast``1(System.Object)">
            <summary>
            Try cast an object to a provided type <typeparamref name="T"/>.
            </summary>
            <param name="obj">object to cast</param>
            <typeparam name="T">Type that will be used to cast object</typeparam>
            <returns>Casted object to type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.MathServices.ArithmeticServices">
            <summary>
               Arithmetic services.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.ArithmeticServices.GetDecimalPlaces(System.Decimal)">
            <summary>
               Returns the number of decimal places in a decimal number.
            </summary>
            <param name="n">Number to get decimal places</param>
            <returns>NUmber of decimal places</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.MathServices.LinearAlgebraServices">
            <summary>
            Utils to perform linear algebra operations on Dynamo Geometry
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.LinearAlgebraServices.GetRelativeCoordinatesOfPoint(Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.CoordinateSystem)">
            <summary>
            Get the coordinates of a point relative to a Coordinate System
            </summary>
            <param name="point">Point to get the relative coordinates</param>
            <param name="cs">Coordinate System to get the relative coordinates</param>
            <returns>
            Tuple with the relative coordinates of the point
            </returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.MathServices.RangeServices">
            <summary>
            Utils to generate numeric ranges
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.RangeServices.StartEndStep(System.Double,System.Double,System.Double)">
            <summary>
            Generates a range between two numbers by a given step
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.RangeServices.StartEndStep(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Generates a range between two numbers by a given (optionally approximated) step
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="step"></param>
            <param name="approximateStep"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.RangeServices.StartEndAmount(System.Double,System.Double,System.UInt16)">
            <summary>
            Generates a range between two numbers by a given quantity, including the two numbers.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.MathServices.SequenceServices">
            <summary>
            Utils to generate numeric sequences
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.MathServices.SequenceServices.ArithmeticProgression(System.Double,System.UInt16,System.Double)">
            <summary>
            Generates a range of values in Arithmetic Progression
            </summary>
            <param name="a1">The first value of progression</param>
            <param name="n">The number of values of progression</param>
            <param name="d">Common difference of progression</param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.Reflection.ReflectionServices">
            <summary>
            Reflection services
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Reflection.ReflectionServices.GetExecutingAssemblyPath">
            <summary>
            Get executing assembly path
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Reflection.ReflectionServices.GetDelegateFullName(System.Delegate)">
            <summary>
            Get delegate full name
            </summary>
            <param name="del"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Reflection.ReflectionServices.GetDelegateInfo(System.Delegate,System.String)">
            <summary>
            Get delegate info
            </summary>
            <param name="del"></param>
            <param name="functionsProjectName"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Reflection.ReflectionServices.GetTypeByFullNameAndAssemblyPath(System.String,System.String)">
            <summary>
            Get type by full name and assembly path
            </summary>
            <param name="typeFullName"></param>
            <param name="typeAssemblyPath"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.Reflection.ReflectionServices.SearchPropertyUpwardsInInheritanceHierarchy(System.Type,System.String,System.Type,System.Reflection.BindingFlags)">
            <summary>
            Search for a property by its name, considering <paramref name="typeToSearch"/> Inheritance hierarchy in
            upwards direction. The search starts from the specified <paramref name="typeToSearch"/> and goes up to
            <see cref="T:System.Object"/> if <paramref name="stopType"/> is not specified.
            </summary>
            <remarks>
            Optionally could be passed certain binding flags and a specific type to stop the search.
            </remarks>
            <param name="typeToSearch">The type from which to start searching for the property.</param>
            <param name="propertyName">The name of the property to find.</param>
            <param name="stopType">
            The type at which to stop searching in the hierarchy.
            If null, the search continues up to <see cref="T:System.Object"/>.
            </param>
            <param name="bindingFlags">
            The binding flags to use when searching for the property. Default is
            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> object representing the property if found; otherwise, null.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="propertyName"/> is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="typeToSearch"/> is null.</exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.CategoryServices">
            <summary>
            Revit Categories services
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.ToBuiltInCategory(Autodesk.Revit.DB.Category)">
            <summary>
            Convert a given Revit Category to its related BuiltInCategory
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.ToRevitCategory(Autodesk.Revit.DB.BuiltInCategory,Autodesk.Revit.DB.Document)">
            <summary>
            Convert a given BuiltInCategory to its related Revit Category
            </summary>
            <param name="bic"></param>
            <param name="doc">Document to get category. Leave null to consider current document.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.IsAnnotationCategory(Autodesk.Revit.DB.Category)">
            <summary>
            Checks if Category is an Annotation Category
            </summary>
            <param name="cat"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.IsAnnotationCategory(Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Checks if Category is an Annotation Category
            </summary>
            <param name="bic"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.IsModelCategory(Autodesk.Revit.DB.Category)">
            <summary>
                Checks if Category is a Model "Drawable" Category
            </summary>
            <param name="cat"></param>
            <remarks>
                AllowsBoundParameters check if the category can have project parameters.
                Not all model categories can have project parameters. If is the case this means that the category
                is not a drawable category.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.IsModelCategory(Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Checks if Category is a Model Category
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.CategoryServices.GetElementId(Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Get the ElementId for a given BuiltInCategory.
            </summary>
            <param name="bic">The BuiltInCategory to get the ElementId for.</param>
            <returns>The ElementId for the given BuiltInCategory.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.DesignOptionServices">
            <summary>
            Design options collectors
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.DesignOptionServices.GetActiveDesignOptionId(Autodesk.Revit.DB.Document)">
            <summary>
            Gets the active design option id for the current design option set.
            </summary>
            <returns>The active design option id. It can be invalid id if there is no active design option in the model.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.DocumentServices">
            <summary>
            Document utils codes
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.DocumentServices.OpenDocument(System.String,Autodesk.Revit.UI.UIApplication)">
            <summary>
            Open Revit Document in Background
            </summary>
            <param name="filePath"></param>
            <param name="uiapp"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.DocumentServices.BatchOpenDocuments(System.String,Autodesk.Revit.UI.UIApplication)">
            <summary>
            Batch open several Revit documents
            </summary>
            <param name="folderPath"></param>
            <param name="uiapp"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.DocumentServices.GetName(Autodesk.Revit.DB.Document)">
            <summary>
            Get Revit Document name
            </summary>
            <param name="document"></param>
            <returns name="Name"></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.DocumentServices.GetPath(Autodesk.Revit.DB.Document)">
            <summary>
            Get Revit Document path
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.ElementIdServices">
            <summary>
            ElementId Services
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementIdServices.GetElementId(System.Int64)">
            <summary>
            Get the ElementId besides the Revit version
            </summary>
            <param name="id">The long value representing the ElementId.</param>
            <returns>The ElementId corresponding to the provided long value.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementIdServices.GetValue(Autodesk.Revit.DB.ElementId)">
            <summary>
            Get the value of the ElementId besides the Revit version
            </summary>
            <param name="elementId">The ElementId to retrieve the value from.</param>
            <returns>The value of the ElementId.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementIdServices.IsValidId(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Document)">
            <summary>
            Checks if an ElementId is valid on given Document
            </summary>
            <param name="document">Document to check</param>
            <param name="elementId">ElementId to check</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementIdServices.GetElement``1(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Document)">
            <summary>
               Get the element from its ElementId.
            </summary>
            <param name="id">ElementId to get Element</param>
            <param name="doc">Document to get Element. Leave null to get active document</param>
            <typeparam name="TCast">
                Type derived from <see cref="T:Autodesk.Revit.DB.Element"/> to cast the result
            </typeparam>
            <returns>Element correspondent to provided <paramref name="id"/></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementIdServices.GetElement``1(System.String,Autodesk.Revit.DB.Document)">
            <summary>
               Get the element from its UniqueId.
            </summary>
            <param name="uniqueId">UniqueId to get Element</param>
            <param name="doc">Document to get Element. Leave null to get active document</param>
            <typeparam name="TCast">
                Type derived from <see cref="T:Autodesk.Revit.DB.Element"/> to cast the result
            </typeparam>
            <returns>Element correspondent to provided <paramref name="uniqueId"/></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.ElementServices">
            <summary>
            Elements conversions
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsCutByView(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.View,System.Collections.Generic.List{Autodesk.Revit.DB.Solid}@,Autodesk.Revit.DB.RevitLinkInstance,Autodesk.Revit.DB.Options,System.Double)">
            <summary>
            Determines whether an element is cut by view plane or not
            </summary>
            <param name="element">Element to test</param>
            <param name="view">View to test if the element is cut by</param>
            <param name="solidsCut">Solids cut by view plane</param>
            <param name="linkInstance">
                Link instance that the element belong. Leave null if the element is not linked.
            </param>
            <param name="options">Geometry options to get element solid</param>
            <param name="tolerance">Tolerance in feet to get cut solid</param>
            <returns>Whether an element is cut by view plane or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetElementsBoundingBox(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Autodesk.Revit.DB.Element})">
            <summary>
            Get BoundingBox from Elements
            </summary>
            <param name="doc"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetNearbyElements(Autodesk.Revit.DB.Element,System.Collections.Generic.List{Autodesk.Revit.DB.BuiltInCategory},Autodesk.Revit.DB.Document,System.Double)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="categories"></param>
            <param name="docToSearch"></param>
            <param name="searchDistance"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsLineBased(Autodesk.Revit.DB.Element)">
            <summary>
            Extension method that returns whether this element is line base or not
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetLineBasedBoundLine(Autodesk.Revit.DB.Element)">
            <summary>
            Extension method to get line based element bound line
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetLineBasedDirection(Autodesk.Revit.DB.Element)">
            <summary>
            Extension method that returns line based element direction
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetSolids(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Options)">
            <summary>
            Extension method to get element solids
            </summary>
            <param name="element">Element to get solids</param>
            <param name="options">Geometry options to get element solids</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetLevel(Autodesk.Revit.DB.Element)">
            <summary>
            Extension method to get element level.
            </summary>
            <param name="element"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetFacesByDirection(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Document,Autodesk.Revit.DB.XYZ)">
            <summary>
            Extension method to get element faces by direction
            </summary>
            <param name="element"></param>
            <param name="doc"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsFromCategory(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Extension method to check if an Element belongs to a given BuiltInCategory
            </summary>
            <param name="element">Element to check</param>
            <param name="bic">BuiltInCategory to compare</param>
            <returns>Whether Element belongs to given BuiltInCategory or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsValidElement(Autodesk.Revit.DB.Element)">
            <summary>
            Checks if an Element is valid on its Document
            </summary>
            <param name="element">Element to check</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsLinkedElement(Autodesk.Revit.DB.Element)">
            <summary>
            Checks whether an element is linked or not
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetRooms(Autodesk.Revit.DB.Element)">
            <summary>
            <para>Extension method to get Rooms which element is within</para>
            <i>This method collects Rooms from Document in which the Element resides in</i>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetRooms(Autodesk.Revit.DB.Element,System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Architecture.Room})">
            <summary>
            <para>Extension method to get Rooms which element is within</para>
            <i>You need to provide Rooms to check</i>
            </summary>
            <param name="element"></param>
            <param name="roomsToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetLocationAsPoint(Autodesk.Revit.DB.Element)">
            <summary>
            Extension method to get element location as point
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetBoundingBoxFilter(Autodesk.Revit.DB.Element,System.Double,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Returns a BoundingBoxIntersectsFilter based on the bounding box of the element.
            </summary>
            <param name="element">The element to get the bounding box filter for.</param>
            <param name="offset">The offset value to expand or shrink the bounding box.</param>
            <param name="linkInstance">The link instance that the element belongs to. Leave null if the element is not linked.</param>
            <returns>A BoundingBoxIntersectsFilter based on the bounding box of the element.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetBoundingBox(Autodesk.Revit.DB.Element,System.Double,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Get the bounding box of an element.
            </summary>
            <param name="element">The element to get the bounding box of.</param>
            <param name="offset">The offset value to expand or shrink the bounding box. Default value is 0.</param>
            <param name="linkInstance">
                The link instance that the element belongs to.
                Leave null if the element is not linked. Default value is null.
            </param>
            <returns>The bounding box of the element.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsAnnotationElement(Autodesk.Revit.DB.Element)">
            <summary>
            Checks whether an element is an Annotation Element or not
            </summary>
            <param name="element">Element to check</param>
            <returns>Whether the element is an Annotation Element or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsModelInPlace(Autodesk.Revit.DB.Element)">
            <summary>
            Checks whether an element is Model In Place or not
            </summary>
            <param name="element">Element to check</param>
            <returns>Whether the element is Model in place or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetAnnotationOutline(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.View,System.Double)">
            <summary>
            Get annotation element <see cref="T:Autodesk.Revit.DB.Outline"/> projected on view plane
            </summary>
            <param name="element">Annotation element to get Outline in view</param>
            <param name="view">View used to get element Outline</param>
            <param name="offset">Outline offset in Internal units</param>
            <returns>Annotation Outline</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.CheckAnnotationsClashes(System.Collections.Generic.IEnumerable{Autodesk.Revit.DB.Element},Autodesk.Revit.DB.Color)">
            <summary>
            Checks if there is any clash between provided annotations.
            </summary>
            <param name="annotationElements">Elements to clash test. Must be from Annotation Categories.</param>
            <param name="clashColor">
                Color to set overrides in case elements are in clash. Leave null to not set overrides.
            </param>
            <remarks>Provided elements that are not in clash will have their overrides cleaned up.</remarks>
            <returns>Clashed elements</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.IsLinked(Autodesk.Revit.DB.Element)">
            <summary>
            Determines whether an element is on a linked model or not
            </summary>
            <param name="element">The element to test</param>
            <returns>Whether the element is on a linked model</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.BelongsToLinkedModel(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.RevitLinkInstance)">
            <summary>
            Determines whether an element belongs to a linked model or not.
            </summary>
            <param name="element">The element to check.</param>
            <param name="linkInstance">The link instance to check if the element belongs to.</param>
            <returns>True if the element belongs to the linked model, otherwise false.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.SetElementsOverrides(System.Collections.Generic.List{Autodesk.Revit.DB.Element},Autodesk.Revit.DB.View,Autodesk.Revit.DB.OverrideGraphicSettings)">
            <summary>
            Set elements overrides
            </summary>
            <param name="elements"></param>
            <param name="view"></param>
            <param name="overrideGraphicSettings"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.HasParameter(Autodesk.Revit.DB.Element,DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter,DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo@,System.Text.RegularExpressions.Regex)">
            <summary>
                Check if an Element has a parameter by passing a <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> and
                directly comparing <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>.<see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Name"/> with Element
                parameters names, to lookup for a match.
            </summary>
            <param name="element">Element to get parameter</param>
            <param name="elementParameter">Parameter data to get</param>
            <param name="regex">
            Regular expression to lookup parameter.
            Set null to use <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>.<see cref="P:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter.Name"/>
            property without regex (faster).
            </param>
            <param name="accessParameterInfo">Stores parameter access results.</param>
            <returns>Whether the element is valid or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetParameters(Autodesk.Revit.DB.Element,System.Collections.Generic.IEnumerable{DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter},DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions)">
            <summary>
            Retrieves the parameters of a Revit element based on the specified list of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/>.
            </summary>
            <param name="element">The Revit element whose parameters are to be retrieved.</param>
            <param name="elementParameters">
            The array of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter"/> instances that specify the parameters to retrieve.
            </param>
            <param name="options">Options to get parameter.</param>
            <returns>An enumerable collection of parameters matching the specified element parameters.</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.GetParameter(Autodesk.Revit.DB.Element,DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter,DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions)">
            <summary>
            Get Parameter from Element using Regex.
            </summary>
            <param name="element">Element to get parameter</param>
            <param name="elementParameter">Parameter to get</param>
            <param name="options">Options to get parameter.</param>
            <remarks>
            Element could be a Instance or a Type.
            </remarks>
            <returns>Revit parameter from </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ElementServices.SetParameters(Autodesk.Revit.DB.Element,DynamoForRevitUtils.Entities.ParametersHandlers.AccessElementParameterOptions,System.Collections.Generic.IEnumerable{DynamoForRevitUtils.Entities.ParametersHandlers.ElementParameter})">
            <summary>
            Sets parameters for a specified Revit element based on the provided parameter collection and options.
            </summary>
            <param name="element">Revit element to set parameters on.</param>
            <param name="options">Settings or options that determine how the parameters are applied to the element.</param>
            <param name="elementParameters">Collection of parameters to be set on the element.</param>
            <returns>A collection of <see cref="T:DynamoForRevitUtils.Entities.ParametersHandlers.AccessParameterInfo"/> objects containing details of the parameter setting results.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices">
            <summary>
            Class that contains methods to work with Family Instances
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetSolidsFromGeometryObjects(System.Collections.Generic.List{Autodesk.Revit.DB.GeometryObject})">
            <summary>
            Recursively gets Solids from a given list of <see cref="T:Autodesk.Revit.DB.GeometryObject"/>
            </summary>
            <param name="geometryObjects"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetReferenceByName(Autodesk.Revit.DB.FamilyInstance,System.String)">
            <summary>
            Extension method to get FamilyInstance <see cref="T:Autodesk.Revit.DB.Reference"/> by name
            </summary>
            <param name="famInst"></param>
            <param name="refName"></param>
            <returns>Reference</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetReferenceByType(Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.FamilyInstanceReferenceType)">
            <summary>
            Extension method to get FamilyInstance <see cref="T:Autodesk.Revit.DB.Reference"/> by <see cref="T:Autodesk.Revit.DB.FamilyInstanceReferenceType"/>
            </summary>
            <param name="famInst"></param>
            <param name="refType"></param>
            <returns>References</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetAllNestedFamilies(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
            Extension method to recursively gets all nested families of this FamilyInstance, including itself.
            </summary>
            <param name="famInst"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetSolids(Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.Document)">
            <summary>
            Recursively gets FamilyInstance Solids
            </summary>
            <param name="famInst"></param>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.FamilyInstanceServices.GetCuboid(Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.Document)">
            <summary>
            Extension method to get FamilyInstance <see cref="T:Autodesk.DesignScript.Geometry.Cuboid"/>
            </summary>
            <param name="doc"></param>
            <param name="famInst">This Family Instance</param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.GridServices">
            <summary>
            Grid services.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.GridServices.GetDirection(Autodesk.Revit.DB.Grid,System.Double)">
            <summary>
                Get grid direction.
            </summary>
            <param name="grid">Grid to get direction</param>
            <param name="parameter">
                A value between 0 e 1 that represents the position of the point to evaluate along
                the curve. The default value is 0.5, which is the midpoint of the curve.
            </param>
            <returns>
                The direction of the grid at the given parameter. For not straight grids, the
                direction is the tangent of the curve at the given parameter.
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.GridServices.GetPlane(Autodesk.Revit.DB.Grid,System.Double)">
            <summary>
                Get grid plane perpendicular to View where it is placed.
            </summary>
            <param name="grid">Grid to get plane</param>
            <param name="parameter">
                A value between 0 e 1 that represents the position of the point to evaluate along
                the curve. The default value is 0.5, which is the midpoint of the curve.
            </param>
            <returns>
                The plane of the grid at the given parameter. For not straight grids, the plane is
                the 'tangent' plane of the curve at the given parameter.
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.GridServices.DistanceToPoint(Autodesk.Revit.DB.Grid,Autodesk.Revit.DB.XYZ)">
            <summary>
                Get distance from grid to point in Internal Units.
            </summary>
            <param name="grid"></param>
            <param name="xyz"></param>
            <returns>Calculated distance in Internal Units</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.GridServices.ProjectPoint(Autodesk.Revit.DB.Grid,Autodesk.Revit.DB.XYZ)">
            <summary>
                Projects a given point onto a grid.
            </summary>
            <param name="grid">The grid to project the point onto.</param>
            <param name="point">The point to be projected onto the grid.</param>
            <returns>The projected point on the grid.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.ImportInstanceServices">
            <summary>
            Elements conversions
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ImportInstanceServices.GetLevel(Autodesk.Revit.DB.ImportInstance)">
            <summary>
            Get the Level of a CAD Link
            </summary>
            <param name="cadLink"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.LevelServices">
            <summary>
            Elements conversions
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.LevelServices.GetNearestLevel(Autodesk.Revit.DB.Level,System.Boolean)">
            <summary>
            Get nearby level to this level on given direction
            </summary>
            <param name="thisLevel"></param>
            <param name="above"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.LevelServices.GetNearestLevel(Autodesk.Revit.DB.Document,System.Double,System.UInt16,System.Boolean)">
            <summary>
            Get nearby level from a given elevation on given Document , on given direction
            </summary>
            <param name="onThisDocument"></param>
            <param name="toThisElevation"></param>
            <param name="approximation"></param>
            <param name="above"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.MEPCurveServices">
            <summary>
            General utile for Revit Elements
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.MEPCurveServices.GetReferences(Autodesk.Revit.DB.MEPCurve)">
            <summary>
            Extension method to get MEPCurve references for dimensioning purposes
            </summary>
            <param name="mepCurve"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices">
            <summary>
            Revit geometry tools
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.IsParallelTo(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.UInt16)">
            <summary>
            Verify if two vectors are parallel
            </summary>
            <param name="vector"></param>
            <param name="otherVector"></param>
            <param name="precision">A positive integer representing the rounding precision</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.IsPerpendicularTo(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.UInt16)">
            <summary>
            Verify if two vectors are perpendicular
            </summary>
            <param name="vector"></param>
            <param name="otherVector"></param>
            <param name="precision">A positive integer representing the rounding precision</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.GetMidPoint(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ)">
            <summary>
            Get the mid point between two points
            </summary>
            <param name="point"></param>
            <param name="otherPoint"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.ArePointsCollinear(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
            Evaluates if given three points are collinear by a given tolerance
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="tolerance"></param>
            <returns>Whether the three points are collinear or not</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.GetOuterCurves(Autodesk.Revit.DB.Face)">
            <summary>
            Get face outer curves
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.CreateByRectangle(Autodesk.DesignScript.Geometry.Rectangle)">
            <summary>
            Creates a BoundingBox based on rectangle
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.ToProtoBoundingBox(Autodesk.Revit.DB.BoundingBoxXYZ)">
            <summary>
            Converts a Revit API BoundingBoxXYZ to Dynamo Geometry BoundingBox
            </summary>
            <param name="bboxXYZ"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.DistanceToPlane(Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.Plane)">
            <summary>
            Calculates the distance between a point and a plane
            </summary>
            <param name="point"></param>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.DistanceToPoint(Autodesk.Revit.DB.Plane,Autodesk.Revit.DB.XYZ)">
            <summary>
            Calculates the distance between a plane and a point
            </summary>
            <param name="plane"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.RevitGeometryServices.SwapCoordinateValue(Autodesk.Revit.DB.XYZ,DynamoForRevitUtils.Enumerations.Coordinate,System.Double)">
            <summary>
            Swap a coordinate value of XYZ
            </summary>
            <param name="xyz">Point to swap coordinate</param>
            <param name="coordinate">Coordinate to swap</param>
            <param name="value">New value that will be used on swapped coordinate</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if coordinate has an invalid value.</exception>
            <returns>Point with swapped coordinate</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.TagCreationService">
            <summary>
            Abstract base class for creating Tag creation services.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagCreationService._tagInfo">
            <summary>
            Object representing information about a tag, including the element to tag, the owner view, the symbol id,
            offset, link instance, and whether to add a leader.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagCreationService.ValidCategories">
            <summary>
            The valid categories for the Element.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagCreationService.#ctor">
            <summary>
            Constructor TagInfo class.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagCreationService.CalculateTagPoints">
            <summary>
            Calculate the Tag points.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagCreationService.SetTagLocationAndHeadPositionOnFloorPlan(DynamoForRevitUtils.Services.RevitServices.TagInfo)">
            <summary>
            Sets the tag location and head position on the Floor Plan.
            </summary>
            <param name="tagInfo">
                Information about the tag, including the element to tag, the owner view, the symbol id, offset,
                link instance, and whether to add a leader.
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagCreationService.SetTagLocationAndHeadPositionOnSection(DynamoForRevitUtils.Services.RevitServices.TagInfo)">
            <summary>
            Sets the tag location and head position on a Section in Revit.
            </summary>
            <param name="tagInfo">
                Information about the tag, including the element to tag, the owner view, the symbol id, offset,
                link instance, and whether to add a leader.
            </param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagCreationService.CreateTag">
            <summary>
            Creates a <see cref="T:Autodesk.Revit.DB.IndependentTag"/> for this
            Element on Revit active <see cref="T:Autodesk.Revit.DB.Document"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.TagInfo">
            <summary>
            Represents information required for creating a new tag in Revit.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.Element">
            <summary>
            The Element that the tag will be created for.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.LinkInstance">
            <summary>
            The RevitLinkInstance that the Element belongs to.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.OwnerViewId">
            <summary>
            The Id of the View that the tag will be created in.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.OwnerView">
            <summary>
            The View that the tag will be created in.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.SymbolId">
            <summary>
            The TagType that the tag will be created with.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.TagReference">
            <summary>
            The Tag reference.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.Offset">
            <summary>
            The Tag offset in Display units.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.AddLeader">
            <summary>
            When true, the tag will be created with a leader.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.Location">
            <summary>
            The location of the tag.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.LeaderEnd">
            <summary>
            The Tag leader end point.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.LeaderElbow">
            <summary>
            The Tag leader elbow point.
            </summary>
        </member>
        <member name="P:DynamoForRevitUtils.Services.RevitServices.TagInfo.TagHeadPosition">
            <summary>
            The Tag head point.
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TagInfo.#ctor(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId,System.Double,Autodesk.Revit.DB.RevitLinkInstance,System.Boolean)">
            <summary>
            Constructor TagInfo class.
            </summary>
            <param name="element">Element that the tag will be created for.</param>
            <param name="ownerViewId">The Id of the View that the tag will be created in.</param>
            <param name="symbolId">The Id of the TagType that the tag will be created with.</param>
            <param name="offset">The Tag offset in Display units.</param>
            <param name="linkInstance">The RevitLinkInstance that the Element belongs to.</param>
            <param name="addLeader">When true, the tag will be created with a leader.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices">
            <summary>
            Services for Task Dialogs
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices._getDefaultTitle(System.String)">
            <summary>
            Gets the default title for a task dialog
            </summary>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices._baseTaskDialog(System.String,System.String,Autodesk.Revit.UI.TaskDialogIcon,System.String)">
            <summary>
            Base constructor for most task dialogs
            </summary>
            <param name="title"></param>
            <param name="mainInstruction"></param>
            <param name="icon"></param>
            <param name="helpLink"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices.ShowInformation(System.String,System.String,System.String)">
            <summary>
            Show a Dialog with an information icon
            </summary>
            <param name="mainInstruction">Dialog instruction</param>
            <param name="title">Task Dialog window title</param>
            <param name="helpLink"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices.ShowWarning(System.String,System.String,System.String)">
            <summary>
            Show a Task Dialog with a warning icon
            </summary>
            <param name="mainInstruction">Dialog instruction</param>
            <param name="title">Task Dialog window title</param>
            <param name="helpLink"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices.ShowError(System.String,System.String,System.String)">
            <summary>
            Show a Task Dialog with an error icon
            </summary>
            <param name="title"></param>
            <param name="mainInstruction">Dialog instruction</param>
            <param name="helpLink"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices.ShowDecisionDialog(System.String,System.String,System.Boolean,System.String)">
            <summary>
            A dialog designed to return true for when the user clicks on the yes button of the dialog
            and false for any other option
            </summary>
            <param name="mainInstruction">Dialog instruction</param>
            <param name="title"></param>
            <param name="DefaultToYes"></param>
            <param name="helpLink"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.TaskDialogServices.ShowMultiChoiceDialog(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            A task dialog with up to four options to let the user choose.
            </summary>
            <param name="title"></param>
            <param name="mainInstruction">Dialog instruction</param>
            <param name="firstChoiceMsg"></param>
            <param name="secondChoiceMsg"></param>
            <param name="thirdMsgChoiceMsg"></param>
            <param name="fourthChoiceMsg"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.ViewServices">
            <summary>
            Class containing tools to deal with Revit Views
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.GetCuboid(Autodesk.Revit.DB.View3D)">
            <summary>
            Extension method to get a <see cref="T:Autodesk.DesignScript.Geometry.Cuboid"/>
            that represents the View3d SectionBox, properly positioned in 3d space
            </summary>
            <param name="view3d"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.GetPlane(Autodesk.Revit.DB.View)">
            <summary>
            Get the Plane of a View. The Plane is created by the ViewDirection and Origin of the View
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.GetActiveUIView(Autodesk.Revit.UI.UIDocument)">
            <summary>
            Get active UIView
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.PickPointOnActive2DView(System.String,System.Boolean,System.Nullable{Autodesk.Revit.UI.Selection.ObjectSnapTypes})">
            <summary>
            Pick a point on the Active 2D view.
            </summary>
            <param name="prompt">Prompt selection text</param>
            <param name="showDialog">Whether show a TaskDialog or not</param>
            <param name="snapTypes">Snap types allowed during PickPoint operations. Leave null to set all.</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.TrySet2DViewPlaneAsWorkPlane(Autodesk.Revit.DB.View)">
            <summary>
            Try set view plane as work plane
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.ViewServices.Validate2DViewToPlaceAnnotations(Autodesk.Revit.DB.View,System.Boolean)">
            <summary>
            Validate a View to place annotations
            </summary>
            <param name="view">View to validate</param>
            <param name="mustBeViewPlan">Set true to validate if the view is <see cref="T:Autodesk.Revit.DB.ViewPlan"/></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="view"/> is null</exception>
            <exception cref="T:System.Exception">Thrown if any other error occurs</exception>
        </member>
        <member name="T:DynamoForRevitUtils.Services.RevitServices.WallServices">
            <summary>
            Class containing tools to deal with Revit Walls
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetJoinedElementsAtEnds(Autodesk.Revit.DB.Wall)">
            <summary>
            Getting joined elements at Wall ends
            </summary>
            <param name="wall">Wall to detect joined elements at ends</param>
            <returns>Joined elements at ends</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetJoinedElementsAtEnds(Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.BuiltInCategory)">
            <summary>
            Getting joined elements at Wall ends from given <see cref="T:Autodesk.Revit.DB.BuiltInCategory"/>
            </summary>
            <param name="wall">Wall to detect joined elements at ends</param>
            <param name="category">Category to filter elements</param>
            <returns>Joined elements at ends</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetBasicWallsNearby(Autodesk.Revit.DB.Wall)">
            <summary>
            Gets the Basic Walls nearby to the given wall
            </summary>
            <param name="wall"></param>
            <returns>List of Basic Walls nearby to provided wall</returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetExtremitiesSurfaces(Autodesk.Revit.DB.Wall)">
            <summary>
            Get extremities surfaces
            </summary>
            <param name="wall"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetLateralSurfaces(Autodesk.Revit.DB.Wall)">
            <summary>
            Get lateral surfaces.
            </summary>
            <remarks>Lateral faces are those that are parallel to the wall axis</remarks>
            <param name="wall"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetVerticalSurfaces(Autodesk.Revit.DB.Wall)">
            <summary>
            Gets vertical Surfaces of this Wall
            </summary>
            <param name="wall"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetHorizontalSurfaces(Autodesk.Revit.DB.Wall)">
            <summary>
            Gets horizontal Surfaces of this Wall
            </summary>
            <param name="wall"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetTopFace(Autodesk.Revit.DB.Wall)">
            <summary>
            Get Top Face of this Wall
            </summary>
            <param name="wall"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetBottomSurface(Autodesk.Revit.DB.Wall)">
            <summary>
            Get Bottom Face of this Wall
            </summary>
            <param name="wall"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetFrontalSurfaces(Autodesk.Revit.DB.Wall)">
            <summary>
            <para>Gets the front faces associated with a wall.</para>
            <remarks>
            Some walls joined together may have their front face split.
            Because of this, this method returns a list of faces.
            </remarks>
            </summary>
            <param name="wall"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetFairwayVerticalSurfaces(Autodesk.Revit.DB.Wall,System.Double)">
            <summary>
                Get nearby vertical surfaces from this Wall. 
                This could return this Wall extremity surfaces if 
                there are not Walls joined at its ends.
            </summary>
            <remarks><i>Only works for straight walls</i></remarks>
            <param name="wall">
            Wall to get fairway vertical surfaces
            </param>
            <param name="searchDistance">
                Distance to search Vertical surfaces. Recommend to be major then most larger wall width
            </param>
            <returns>
            Fairway vertical surfaces from Wall
            </returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetExtendedSolid(Autodesk.Revit.DB.Wall,System.Double)">
            <summary>
                Retrieves extended solid from this wall.
                Extended solid is that one that comprehends the whole Wall extension.
                Not only defined by its location line. Which includes joints with other Walls.
            </summary>
            <remarks><i>Only works on straight walls</i></remarks>
            <param name="wall"></param>
            <param name="extents"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetExtendedLocation(Autodesk.Revit.DB.Wall,System.Double)">
            <summary>
                Retrieves extended Location Line from this wall, translated to its base offset.
                Extended Location Curve is that one that comprehends the whole Wall extension.
                Not only defined by its location curve. Which includes joints with other Walls.
            </summary>
            <param name="wall"></param>
            <param name="extents"></param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetExtendedLocationLine(Autodesk.Revit.DB.Wall,System.Double)">
            <summary>
                Retrieves extended Location Line from this wall, translated to its base offset.
                Extended Location Line is that one that comprehends the whole Wall extension.
                Not only defined by its location line. Which includes joints with other Walls.
            </summary>
            <remarks><i>Only works on straight walls</i></remarks>
            <param name="wall"></param>
            <param name="extents"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetPhysicalLocation(Autodesk.Revit.DB.Wall)">
            <summary>
            Gets the Wall physical location curve based on its base offset
            </summary>
            <param name="wall">Wall to get location</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetParallelGrids(Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.Document)">
            <summary>
            Gets parallel grids to this straight Wall
            </summary>
            <remarks>
               <i>Only returns straight grids</i>
            </remarks>
            <param name="wall">Wall to get straight parallel Grids</param>
            <param name="document">Document to get grids</param>
            <returns></returns>
        </member>
        <member name="M:DynamoForRevitUtils.Services.RevitServices.WallServices.GetProtoSolid(Autodesk.Revit.DB.Wall)">
            <summary>
            Get the protosolid of a Wall.
            </summary>
            <remarks>
            <para>
            This method uses a different approach from ToProtoType() method.
            It uses the Wall's physical location and dimensions to create a <see cref="T:Autodesk.DesignScript.Geometry.Solid"/>. 
            </para>
            <b>The returned solid does not contains openings</b>, it is a simple extrusion of the Wall's location curve.
            Use this method to analyze the Wall's geometry without considering its openings.
            </remarks>
            <param name="wall">The Wall to get the protosolid from.</param>
            <returns>The protosolid of the Wall.</returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices">
            <summary>
            Class for units conversion between Dynamo and Revit active document
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertInternalToDisplayUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a value from Revit internal units to display units based on a specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>
            and document.
            </summary>
            <param name="x">The value in Revit's internal units to be converted.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <param name="doc">The Revit document to retrieve display unit formats from. If not provided, the current document is used.</param>
            <returns>The value converted to the display units corresponding to the specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.</returns>
            <remarks>
            <para>
                <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> specifies the "kind" of measurement, like length, area, volume, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=35c5a3db-b4b3-daa0-ebdd-ae87d03cd5bb.htm">Revit API Docs - SpecTypeId</see>
            </para>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertDisplayToInternalUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a value from display units to Revit internal units based on a specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>
            and document.
            </summary>
            <param name="x">The value in display units to be converted.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <param name="doc">The Revit document to retrieve display unit formats from. If not provided, the current document is used.</param>
            <returns>The value converted to Revit internal units corresponding to the specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.</returns>
            <remarks>
            <para>
                <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> specifies the "kind" of measurement, like length, area, volume, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=35c5a3db-b4b3-daa0-ebdd-ae87d03cd5bb.htm">Revit API Docs - SpecTypeId</see>
            </para>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertToDisplayUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a value from a specified unit type to the document's display units, based on the provided <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </summary>
            <param name="x">The value in the original unit type to be converted.</param>
            <param name="currentUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type of the input value.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <param name="doc">The Revit document to retrieve the display unit formats from. If not provided, the current document is used.</param>
            <returns>The value converted to the display units corresponding to the specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="currentUnitTypeId"/> is not valid for
                the specified <paramref name="specTypeId"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="specTypeId"/> is not measurable.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertFromDisplayUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a value from the document's display units to a specified unit type, based on the provided <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </summary>
            <param name="x">The value in display units to be converted.</param>
            <param name="targetUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type to convert to.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <param name="doc">The Revit document to retrieve the display unit formats from. If not provided, the current document is used.</param>
            <returns>The value converted from display units to the specified target unit type.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="targetUnitTypeId"/> is not valid for
                the specified <paramref name="specTypeId"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="specTypeId"/> is not measurable.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertToInternalUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
            Converts a value from a specified unit type to Revit's internal units, based on the provided <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </summary>
            <param name="x">The value in the original unit type to be converted.</param>
            <param name="currentUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type of the input value.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <returns>The value converted to Revit's internal units corresponding to the specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="currentUnitTypeId"/> is not valid for
                the specified <paramref name="specTypeId"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="specTypeId"/> is not measurable.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertFromInternalUnit(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
            Converts a value from Revit's internal units to a specified unit type, based on the provided <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </summary>
            <param name="x">The value in Revit's internal units to be converted.</param>
            <param name="targetUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type to convert to.</param>
            <param name="specTypeId">The <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> representing the specification type for the value being converted.</param>
            <returns>The value converted from Revit's internal units to the specified target unit type.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="targetUnitTypeId"/> is not valid for
                the specified <paramref name="specTypeId"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
                Thrown when the provided <paramref name="specTypeId"/> is not measurable.
            </exception>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.ConvertBetweenUnits(System.Double,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
            Converts a value between two unit types using the specified current and target <see cref="T:Autodesk.Revit.DB.UnitTypeId"/>.
            </summary>
            <param name="x">The value to be converted from the current unit type to the target unit type.</param>
            <param name="currentUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type of the input value.</param>
            <param name="targetUnitTypeId">The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the unit type to which the input value should be converted.</param>
            <returns>The value converted from the current unit type to the target unit type.</returns>
            <remarks>
            <para>
                <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> defines the unit used for measurement, like meter, square meters, cubic meters, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=bc1b6454-f10a-66dc-9268-1dccbc403f78.htm">Revit API Docs - UnitTypeId</see>
            </para>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.DisplayMassDensityToInternalUnit(System.Double,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a mass density value from display units to Revit's internal units based on
            display unit density.
            </summary>
            <param name="x">The mass density value in display units to be converted.</param>
            <param name="doc">
                The Revit document used to determine the display unit type for the conversion.
                If not provided, the current active document is used.
            </param>
            <returns>The mass density value converted to Revit's internal units.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.InternalMassDensityToDisplayUnit(System.Double,Autodesk.Revit.DB.Document)">
            <summary>
            Converts a mass density value from Revit internal units to display units based on the document's unit settings.
            </summary>
            <param name="x">The mass density value in Revit's internal units to be converted.</param>
            <param name="doc">
                The Revit document to retrieve the display unit format for mass density from.
                If not provided, the current active document is used.
            </param>
            <returns>The mass density value converted to the display units configured for the specified document.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.KilogramsPerCubicMeterToInternal(System.Double)">
            <summary>
            Converts a value from kilograms per cubic meter (kg/m³) to Revit's internal mass density unit (kg/ft³).
            </summary>
            <param name="x">The value in kilograms per cubic meter to be converted.</param>
            <returns>The equivalent value converted to Revit's internal mass density unit.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.PoundsMassPerCubicFootToInternal(System.Double)">
            <summary>
            Converts a value from pounds mass per cubic foot to Revit's internal units for mass density.
            </summary>
            <param name="x">The value in pounds mass per cubic foot to be converted.</param>
            <returns>The value converted to Revit's internal units for mass density.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.InternalMassDensityToKilogramsPerCubicMeter(System.Double)">
            <summary>
            Converts a mass density value in Revit's internal units to kilograms per cubic meter.
            </summary>
            <param name="x">The mass density value in Revit's internal units to be converted.</param>
            <returns>The value converted to kilograms per cubic meter.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.ConversionServices.InternalMassDensityToPoundsMassPerCubicFoot(System.Double)">
            <summary>
            Converts a value representing mass density from Revit internal units to pounds mass per cubic foot.
            </summary>
            <param name="x">The value in Revit's internal mass density units to be converted.</param>
            <returns>The value converted to pounds mass per cubic foot.</returns>
            <remarks>
            Revit API does not have a convertion methods for mass desenty cases.
            </remarks>
        </member>
        <member name="T:DynamoForRevitUtils.Services.UnitsConversion.SpecificFactorsServices">
            <summary>
            Class containing specific conversion factors
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Services.UnitsConversion.SpecificFactorsServices.KilogramsPerCubicMeter_To_KilogramsPerCubicFoot">
            <summary>
            kg/m³ -> kg/ft³
            </summary>
        </member>
        <member name="F:DynamoForRevitUtils.Services.UnitsConversion.SpecificFactorsServices.PoundsMassPerCubicFoot_To_KilogramsPerCubicFoot">
            <summary>
            lb/ft³ -> kg/ft³
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.SpecificFactorsServices.GetMassDensityConversionFactorByDisplayUnits(Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
            Gets the mass density conversion factor from display unit type to internal
            </summary>
            <param name="displayUnitTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:DynamoForRevitUtils.Services.UnitsConversion.UnitsServices">
            <summary>
            Class containing Spec types and Unit types
            </summary>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.UnitsServices.ChangeDisplayUnit(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ForgeTypeId,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
            Change Display unit
            </summary>
            <param name="document">Document to change unit</param>
            <param name="unitTypeId">Define what <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> to change.</param>
            <param name="specTypeId">Define what <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> to change.</param>
            <exception cref="T:System.InvalidOperationException">
            Thown if the given <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> is not valid for the given <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </exception>
            <remarks>
            <para>
                <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> specifies the "kind" of measurement, like length, area, volume, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=35c5a3db-b4b3-daa0-ebdd-ae87d03cd5bb.htm">Revit API Docs - SpecTypeId</see>
            </para>
            <para>
                <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> defines the unit used for measurement, like meter, square meters, cubic meters, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=bc1b6454-f10a-66dc-9268-1dccbc403f78.htm">Revit API Docs - UnitTypeId</see>
            </para>
            </remarks>
        </member>
        <member name="M:DynamoForRevitUtils.Services.UnitsConversion.UnitsServices.GetDisplayUnit(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ForgeTypeId)">
            <summary>
                Get display unit (<see cref="T:Autodesk.Revit.DB.UnitTypeId"/>) for a specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </summary>
            <param name="document">Document to get unit from</param>
            <param name="specTypeId">Define what <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> to retrieve.</param>
            <returns>
                The <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> representing the current
                display unit for the specified <see cref="T:Autodesk.Revit.DB.SpecTypeId"/>.
            </returns>
            <remarks>
            <para>
                <see cref="T:Autodesk.Revit.DB.SpecTypeId"/> specifies the "kind" of measurement, like length, area, volume, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=35c5a3db-b4b3-daa0-ebdd-ae87d03cd5bb.htm">Revit API Docs - SpecTypeId</see>
            </para>
            <para>
                <see cref="T:Autodesk.Revit.DB.UnitTypeId"/> defines the unit used for measurement, like meter, square meters, cubic meters, etc.
                See also: <see href="https://revapidocs.com/2025.htm?id=bc1b6454-f10a-66dc-9268-1dccbc403f78.htm">Revit API Docs - UnitTypeId</see>
            </para>
            </remarks>
        </member>
    </members>
</doc>

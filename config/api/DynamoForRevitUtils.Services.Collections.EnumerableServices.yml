### YamlMime:ManagedReference
items:
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices
  commentId: T:DynamoForRevitUtils.Services.Collections.EnumerableServices
  id: EnumerableServices
  parent: DynamoForRevitUtils.Services.Collections
  children:
  - DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  - DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  - DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0})
  - DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: EnumerableServices
  nameWithType: EnumerableServices
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices
  type: Class
  assemblies:
  - DynamoForRevitUtils
  namespace: DynamoForRevitUtils.Services.Collections
  summary: Provides utility methods for working with IEnumerable objects.
  example: []
  syntax:
    content: public static class EnumerableServices
    content.vb: Public Module EnumerableServices
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0})
  id: HasAny``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: DynamoForRevitUtils.Services.Collections.EnumerableServices
  langs:
  - csharp
  - vb
  name: HasAny<T>(IEnumerable<T>?)
  nameWithType: EnumerableServices.HasAny<T>(IEnumerable<T>?)
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny<T>(System.Collections.Generic.IEnumerable<T>?)
  type: Method
  assemblies:
  - DynamoForRevitUtils
  namespace: DynamoForRevitUtils.Services.Collections
  summary: Determines whether the specified collection has any elements.
  remarks: <b>Null safe method</b>
  example: []
  syntax:
    content: public static bool HasAny<T>(this IEnumerable<T>? data)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to check.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    return:
      type: System.Boolean
      description: True if the collection has any elements; otherwise, false.
    content.vb: Public Shared Function HasAny(Of T)(data As IEnumerable(Of T)) As Boolean
  overload: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny*
  nameWithType.vb: EnumerableServices.HasAny(Of T)(IEnumerable(Of T))
  fullName.vb: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: HasAny(Of T)(IEnumerable(Of T))
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: HasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  isExtensionMethod: true
  parent: DynamoForRevitUtils.Services.Collections.EnumerableServices
  langs:
  - csharp
  - vb
  name: HasAny<T>(IEnumerable<T>?, Predicate<T>)
  nameWithType: EnumerableServices.HasAny<T>(IEnumerable<T>?, Predicate<T>)
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny<T>(System.Collections.Generic.IEnumerable<T>?, System.Predicate<T>)
  type: Method
  assemblies:
  - DynamoForRevitUtils
  namespace: DynamoForRevitUtils.Services.Collections
  summary: >-
    Determines whether the specified collection has any elements

    that match the conditions defined by the specified predicate.
  remarks: <b>Null safe method</b>
  example:
  - >-
    <pre><code class="lang-csharp">List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };

    Predicate&lt;int&gt; isEven = x =&gt; x % 2 == 0;

    bool hasEvenNumbers = numbers.HasAny(isEven); // returns true</code></pre>
  syntax:
    content: public static bool HasAny<T>(this IEnumerable<T>? data, Predicate<T> predicate)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to check.
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate to test each element for a condition.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    return:
      type: System.Boolean
      description: True if the collection has any elements; otherwise, false.
    content.vb: Public Shared Function HasAny(Of T)(data As IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean
  overload: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny*
  nameWithType.vb: EnumerableServices.HasAny(Of T)(IEnumerable(Of T), Predicate(Of T))
  fullName.vb: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: HasAny(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  id: DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: DynamoForRevitUtils.Services.Collections.EnumerableServices
  langs:
  - csharp
  - vb
  name: DoIfHasAny<T>(IEnumerable<T>, Action<IEnumerable<T>>)
  nameWithType: EnumerableServices.DoIfHasAny<T>(IEnumerable<T>, Action<IEnumerable<T>>)
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny<T>(System.Collections.Generic.IEnumerable<T>, System.Action<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  assemblies:
  - DynamoForRevitUtils
  namespace: DynamoForRevitUtils.Services.Collections
  summary: Executes the specified action if the collection has any elements.
  remarks: <b>Null safe method</b>
  example:
  - >-
    <pre><code class="lang-csharp">List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };

    numbers.DoIfHasAny(n =&gt; Console.WriteLine(n));</code></pre>
  syntax:
    content: public static void DoIfHasAny<T>(this IEnumerable<T> data, Action<IEnumerable<T>> action)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to check.
    - id: action
      type: System.Action{System.Collections.Generic.IEnumerable{{T}}}
      description: The action to execute on the collection.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    content.vb: Public Shared Sub DoIfHasAny(Of T)(data As IEnumerable(Of T), action As Action(Of IEnumerable(Of T)))
  overload: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny*
  nameWithType.vb: EnumerableServices.DoIfHasAny(Of T)(IEnumerable(Of T), Action(Of IEnumerable(Of T)))
  fullName.vb: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Action(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: DoIfHasAny(Of T)(IEnumerable(Of T), Action(Of IEnumerable(Of T)))
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  id: DoIfHasAny``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})
  isExtensionMethod: true
  parent: DynamoForRevitUtils.Services.Collections.EnumerableServices
  langs:
  - csharp
  - vb
  name: DoIfHasAny<T>(IEnumerable<T>?, Predicate<T>, Action<IEnumerable<T>>)
  nameWithType: EnumerableServices.DoIfHasAny<T>(IEnumerable<T>?, Predicate<T>, Action<IEnumerable<T>>)
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny<T>(System.Collections.Generic.IEnumerable<T>?, System.Predicate<T>, System.Action<System.Collections.Generic.IEnumerable<T>>)
  type: Method
  assemblies:
  - DynamoForRevitUtils
  namespace: DynamoForRevitUtils.Services.Collections
  summary: >-
    Executes the specified action if the collection has any elements that match the conditions

    defined by the specified predicate.
  remarks: <b>Null safe method</b>
  example:
  - >-
    <pre><code class="lang-csharp">var numbers = new List&lt;int&gt; { 1, 2, 3, 4, 5 };

    Predicate&lt;int&gt; isEven = x =&gt; x % 2 == 0;

    Action&lt;IEnumerable&lt;int&gt;&gt; print = x =&gt; Console.WriteLine(string.Join(", ", x));

    numbers.DoIfHasAny(isEven, print); // Outputs: "2, 4"</code></pre>
  syntax:
    content: public static void DoIfHasAny<T>(this IEnumerable<T>? data, Predicate<T> predicate, Action<IEnumerable<T>> action)
    parameters:
    - id: data
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to check.
    - id: predicate
      type: System.Predicate{{T}}
      description: The predicate to test each element for a condition.
    - id: action
      type: System.Action{System.Collections.Generic.IEnumerable{{T}}}
      description: The action to execute on the collection.
    typeParameters:
    - id: T
      description: The type of elements in the collection.
    content.vb: Public Shared Sub DoIfHasAny(Of T)(data As IEnumerable(Of T), predicate As Predicate(Of T), action As Action(Of IEnumerable(Of T)))
  overload: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny*
  nameWithType.vb: EnumerableServices.DoIfHasAny(Of T)(IEnumerable(Of T), Predicate(Of T), Action(Of IEnumerable(Of T)))
  fullName.vb: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T), System.Action(Of System.Collections.Generic.IEnumerable(Of T)))
  name.vb: DoIfHasAny(Of T)(IEnumerable(Of T), Predicate(Of T), Action(Of IEnumerable(Of T)))
references:
- uid: DynamoForRevitUtils.Services.Collections
  commentId: N:DynamoForRevitUtils.Services.Collections
  isExternal: true
  href: DynamoForRevitUtils.html
  name: DynamoForRevitUtils.Services.Collections
  nameWithType: DynamoForRevitUtils.Services.Collections
  fullName: DynamoForRevitUtils.Services.Collections
  spec.csharp:
  - uid: DynamoForRevitUtils
    name: DynamoForRevitUtils
    isExternal: true
    href: DynamoForRevitUtils.html
  - name: .
  - uid: DynamoForRevitUtils.Services
    name: Services
    isExternal: true
    href: DynamoForRevitUtils.Services.html
  - name: .
  - uid: DynamoForRevitUtils.Services.Collections
    name: Collections
    isExternal: true
    href: DynamoForRevitUtils.Services.Collections.html
  spec.vb:
  - uid: DynamoForRevitUtils
    name: DynamoForRevitUtils
    isExternal: true
    href: DynamoForRevitUtils.html
  - name: .
  - uid: DynamoForRevitUtils.Services
    name: Services
    isExternal: true
    href: DynamoForRevitUtils.Services.html
  - name: .
  - uid: DynamoForRevitUtils.Services.Collections
    name: Collections
    isExternal: true
    href: DynamoForRevitUtils.Services.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny*
  commentId: Overload:DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny
  isExternal: true
  href: DynamoForRevitUtils.Services.Collections.EnumerableServices.html#DynamoForRevitUtils_Services_Collections_EnumerableServices_HasAny__1_System_Collections_Generic_IEnumerable___0__
  name: HasAny
  nameWithType: EnumerableServices.HasAny
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.HasAny
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{``0}
  parent: System
  definition: System.Predicate`1
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.predicate-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny*
  commentId: Overload:DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny
  isExternal: true
  href: DynamoForRevitUtils.Services.Collections.EnumerableServices.html#DynamoForRevitUtils_Services_Collections_EnumerableServices_DoIfHasAny__1_System_Collections_Generic_IEnumerable___0__System_Action_System_Collections_Generic_IEnumerable___0___
  name: DoIfHasAny
  nameWithType: EnumerableServices.DoIfHasAny
  fullName: DynamoForRevitUtils.Services.Collections.EnumerableServices.DoIfHasAny
- uid: System.Action{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Action{System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<IEnumerable<T>>
  nameWithType: Action<IEnumerable<T>>
  fullName: System.Action<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Action(Of IEnumerable(Of T))
  fullName.vb: System.Action(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Action(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
